generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(cuid())
  email               String               @unique
  password            String
  firstName           String
  lastName            String
  phone               String?
  dateOfBirth         DateTime?
  role                UserRole             @default(CUSTOMER)
  isActive            Boolean              @default(true)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  addresses           String?
  cartItems           CartItem[]
  medicationReminders MedicationReminder[]
  orders              Order[]
  prescriptions       Prescription[]
  reviews             Review[]

  @@map("users")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  @@map("categories")
}

model Product {
  id                   String      @id @default(cuid())
  name                 String
  slug                 String      @unique
  description          String?
  shortDescription     String?
  price                Float
  comparePrice         Float?
  discount             Float       @default(0)
  sku                  String      @unique
  barcode              String?
  stock                Int         @default(0)
  minStock             Int         @default(0)
  maxStock             Int         @default(1000)
  weight               Float?
  dimensions           String?
  images               String?
  featured             Boolean     @default(false)
  isActive             Boolean     @default(true)
  requiresPrescription Boolean     @default(false)
  manufacturer         String?
  expiryDate           DateTime?
  batchNumber          String?
  ingredients          String?
  dosage               String?
  sideEffects          String?
  contraindications    String?
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  categoryId           String
  cartItems            CartItem[]
  orderItems           OrderItem[]
  category             Category    @relation(fields: [categoryId], references: [id])
  reviews              Review[]

  @@map("products")
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart_items")
}

model Order {
  id              String        @id @default(cuid())
  orderNumber     String        @unique
  status          OrderStatus   @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   String?
  totalAmount     Float
  shippingFee     Float         @default(0)
  taxAmount       Float         @default(0)
  discountAmount  Float         @default(0)
  notes           String?
  shippingAddress String
  billingAddress  String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  userId          String
  orderItems      OrderItem[]
  user            User          @relation(fields: [userId], references: [id])

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  quantity  Int
  price     Float
  total     Float
  orderId   String
  productId String
  product   Product @relation(fields: [productId], references: [id])
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model Review {
  id         String   @id @default(cuid())
  rating     Int
  title      String?
  comment    String?
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  productId  String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

model Prescription {
  id                String             @id @default(cuid())
  imageUrl          String
  status            PrescriptionStatus @default(PENDING)
  doctorName        String?
  issueDate         DateTime?
  expiryDate        DateTime?
  medications       String?
  medicationDetails String?
  orderStatus       String?
  notes             String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  userId            String
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("prescriptions")
}

model MedicationReminder {
  id             String    @id @default(cuid())
  medicationName String
  dosage         String?
  frequency      String
  timeSlots      String
  notes          String?
  isActive       Boolean   @default(true)
  nextReminder   DateTime?
  lastTaken      DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  userId         String
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("medication_reminders")
}

enum UserRole {
  CUSTOMER
  ADMIN
  PHARMACIST
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum PrescriptionStatus {
  PENDING
  APPROVED
  REJECTED
}
