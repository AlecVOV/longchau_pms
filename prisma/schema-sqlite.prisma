// This is your Prisma schema file for SQLite (development alternative)
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  phone     String?
  role      UserRole @default(CUSTOMER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Addresses stored as JSON
  addresses String? // JSON string for addresses
  
  // Relations
  orders       Order[]
  cartItems    CartItem[]
  reviews      Review[]
  prescriptions Prescription[]

  @@map("users")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  image       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products Product[]

  @@map("categories")
}

model Product {
  id              String  @id @default(cuid())
  name            String
  slug            String  @unique
  description     String?
  shortDescription String?
  price           Float
  comparePrice    Float?
  discount        Float   @default(0)
  sku             String  @unique
  barcode         String?
  stock           Int     @default(0)
  minStock        Int     @default(0)
  maxStock        Int     @default(1000)
  weight          Float?
  dimensions      String? // JSON string
  images          String? // JSON array of image URLs
  featured        Boolean @default(false)
  isActive        Boolean @default(true)
  requiresPrescription Boolean @default(false)
  manufacturer    String?
  expiryDate      DateTime?
  batchNumber     String?
  ingredients     String? // JSON array
  dosage          String?
  sideEffects     String? // JSON array
  contraindications String? // JSON array
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  
  cartItems    CartItem[]
  orderItems   OrderItem[]
  reviews      Review[]

  @@map("products")
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart_items")
}

model Order {
  id            String      @id @default(cuid())
  orderNumber   String      @unique
  status        OrderStatus @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)
  paymentMethod String?
  totalAmount   Float
  shippingFee   Float       @default(0)
  taxAmount     Float       @default(0)
  discountAmount Float      @default(0)
  notes         String?
  shippingAddress String    // JSON string
  billingAddress String?    // JSON string
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id])
  
  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id       String @id @default(cuid())
  quantity Int
  price    Float
  total    Float

  // Relations
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      // 1-5 stars
  title     String?
  comment   String?
  isVerified Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

model Prescription {
  id          String   @id @default(cuid())
  imageUrl    String   // URL to uploaded prescription image
  status      PrescriptionStatus @default(PENDING)
  doctorName  String?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("prescriptions")
}

// Enums
enum UserRole {
  CUSTOMER
  ADMIN
  PHARMACIST
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum PrescriptionStatus {
  PENDING
  APPROVED
  REJECTED
}
