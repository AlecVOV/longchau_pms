{"file":"orders-epe-K-xW.js","mappings":"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","names":["useNotificationsStore","_a"],"sources":["../../../../stores/orders.js","../../../../pages/account/orders.vue"],"sourcesContent":["import { defineStore } from 'pinia'\r\nimport { useAuthStore } from './auth'\r\n\r\nexport const useOrdersStore = defineStore('orders', {\r\n  state: () => ({\r\n    orders: [],\r\n    currentOrder: null,\r\n    orderHistory: [],\r\n    loading: false,\r\n    trackingInfo: null,\r\n    orderStatuses: [\r\n      'pending',\r\n      'confirmed',\r\n      'processing',\r\n      'packed',\r\n      'shipped',\r\n      'delivered',\r\n      'cancelled'\r\n    ]\r\n  }),\r\n\r\n  getters: {\r\n    getOrderById: (state) => {\r\n      return (id) => state.orders.find(order => order.id === id)\r\n    },\r\n\r\n    getPendingOrders: (state) => {\r\n      return state.orders.filter(order => order.status === 'pending')\r\n    },\r\n\r\n    getCompletedOrders: (state) => {\r\n      return state.orders.filter(order => order.status === 'delivered')\r\n    },\r\n\r\n    getOrdersByStatus: (state) => {\r\n      return (status) => state.orders.filter(order => order.status === status)\r\n    },\r\n\r\n    getTotalOrderValue: (state) => {\r\n      return state.orders.reduce((total, order) => total + order.total, 0)\r\n    },\r\n\r\n    getRecentOrders: (state) => {\r\n      return state.orders\r\n        .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))\r\n        .slice(0, 5)\r\n    }\r\n  },\r\n\r\n  actions: {\r\n    async createOrder(orderData) {\r\n      this.loading = true\r\n      try {\r\n        const authStore = useAuthStore()\r\n        const currentUserId = authStore.user?.id || 'demo-user'\r\n        \r\n        console.log('Creating order with data:', orderData)\r\n        \r\n        // Prepare order data for API in the correct format\r\n        const apiOrderData = {\r\n          orderNumber: orderData.orderNumber,\r\n          items: orderData.items.map(item => ({\r\n            id: item.id,\r\n            quantity: item.quantity,\r\n            price: item.price\r\n          })),\r\n          shipping: orderData.shipping,\r\n          billing: orderData.billing,\r\n          paymentMethod: orderData.paymentMethod,\r\n          subtotal: orderData.subtotal,\r\n          tax: orderData.tax,\r\n          shippingFee: orderData.shippingFee,\r\n          total: orderData.total\r\n        }\r\n        \r\n        console.log('Sending to API:', apiOrderData)\r\n        \r\n        // Try to create order via API first\r\n        let createdOrder = null\r\n        try {\r\n          const apiResponse = await $fetch('/api/orders', {\r\n            method: 'POST',\r\n            body: apiOrderData,\r\n            headers: authStore.token ? {\r\n              Authorization: `Bearer ${authStore.token}`\r\n            } : {}\r\n          })\r\n          \r\n          console.log('API Response:', apiResponse)\r\n          \r\n          if (apiResponse.success && apiResponse.order) {\r\n            createdOrder = apiResponse.order\r\n            console.log('Order created via API successfully:', createdOrder.id)\r\n          }\r\n        } catch (apiError) {\r\n          console.error('API order creation failed:', apiError)\r\n          throw new Error(`Order creation failed: ${apiError.message || 'Unknown API error'}`)\r\n        }\r\n        \r\n        // If API creation succeeded, save to localStorage as backup and update store\r\n        if (createdOrder && process.client) {\r\n          // Prepare order for local storage\r\n          const localOrder = {\r\n            id: createdOrder.id,\r\n            orderNumber: createdOrder.orderNumber,\r\n            userId: currentUserId,\r\n            items: orderData.items,\r\n            shipping: orderData.shipping,\r\n            billing: orderData.billing,\r\n            paymentMethod: orderData.paymentMethod,\r\n            subtotal: orderData.subtotal,\r\n            tax: orderData.tax,\r\n            shippingFee: orderData.shippingFee,\r\n            total: orderData.total,\r\n            status: createdOrder.status || 'pending',\r\n            createdAt: createdOrder.createdAt || new Date().toISOString(),\r\n            updatedAt: createdOrder.updatedAt || new Date().toISOString()\r\n          }\r\n          \r\n          // Save to user-specific localStorage\r\n          const ordersKey = `pharmacy-orders-${currentUserId}`\r\n          const existingOrders = JSON.parse(localStorage.getItem(ordersKey) || '[]')\r\n          existingOrders.push(localOrder)\r\n          localStorage.setItem(ordersKey, JSON.stringify(existingOrders))\r\n          \r\n          // Update store\r\n          this.orders.push(localOrder)\r\n          this.currentOrder = localOrder\r\n        }\r\n        \r\n        return createdOrder\r\n      } catch (error) {\r\n        console.error('Error creating order:', error)\r\n        throw error\r\n      } finally {\r\n        this.loading = false\r\n      }\r\n    },\r\n\r\n    async fetchOrders(params = {}) {\r\n      this.loading = true\r\n      try {\r\n        // Get auth store safely\r\n        let authStore\r\n        let currentUserId = 'demo-user'\r\n        \r\n        try {\r\n          authStore = useAuthStore()\r\n          currentUserId = authStore.user?.id || 'demo-user'\r\n        } catch (authError) {\r\n          console.warn('Auth store not available, using demo user:', authError)\r\n        }\r\n        \r\n        // Try to fetch from API first with cache-busting\r\n        let apiOrders = []\r\n        \r\n        // Store previous orders for comparison\r\n        const previousOrders = [...this.orders]\r\n        \r\n        try {\r\n          const cacheBuster = Date.now()\r\n          const response = await $fetch(`/api/orders?_t=${cacheBuster}`, {\r\n            headers: (authStore && authStore.token) ? {\r\n              Authorization: `Bearer ${authStore.token}`,\r\n              'Cache-Control': 'no-cache',\r\n              'Pragma': 'no-cache'\r\n            } : {}\r\n          })\r\n          \r\n          // Handle the API response structure properly\r\n          if (response && response.success && Array.isArray(response.data)) {\r\n            apiOrders = response.data\r\n          } else if (Array.isArray(response)) {\r\n            // Fallback: if response is directly an array\r\n            apiOrders = response\r\n          } else {\r\n            console.warn('Unexpected API response format:', response)\r\n            apiOrders = []\r\n          }\r\n        } catch (apiError) {\r\n          console.warn('API orders fetch failed, loading from localStorage:', apiError)\r\n          apiOrders = []\r\n        }\r\n        \r\n        // Load from user-specific localStorage as fallback\r\n        if (process.client) {\r\n          const ordersKey = `pharmacy-orders-${currentUserId}`\r\n          const existingOrders = JSON.parse(localStorage.getItem(ordersKey) || '[]')\r\n          \r\n          console.log('Loading orders for user:', currentUserId)\r\n          console.log('Orders key:', ordersKey)\r\n          console.log('Existing orders found:', existingOrders.length)\r\n          console.log('API orders found:', Array.isArray(apiOrders) ? apiOrders.length : 'Not an array')\r\n          \r\n          // Ensure apiOrders is always an array\r\n          if (!Array.isArray(apiOrders)) {\r\n            console.warn('apiOrders is not an array, converting to empty array:', apiOrders)\r\n            apiOrders = []\r\n          }\r\n          \r\n          // If API failed or returned no results, use localStorage orders\r\n          if (apiOrders.length === 0) {\r\n            this.orders = existingOrders.filter(order => \r\n              order.userId === currentUserId\r\n            )\r\n          } else {\r\n            // Merge API orders with local orders (prefer API)\r\n            const localOrderIds = existingOrders.map(o => o.id)\r\n            const newApiOrders = apiOrders.filter(o => !localOrderIds.includes(o.id))\r\n            this.orders = [...existingOrders, ...newApiOrders].filter(order => \r\n              order.userId === currentUserId\r\n            )\r\n          }\r\n          \r\n          console.log('Final orders loaded:', this.orders.length)\r\n          \r\n          // Check for status changes and notify\r\n          if (previousOrders.length > 0) {\r\n            this.checkForStatusChanges(previousOrders, this.orders)\r\n          }\r\n        } else {\r\n          // Ensure apiOrders is always an array before assignment\r\n          if (Array.isArray(apiOrders)) {\r\n            this.orders = apiOrders\r\n          } else {\r\n            console.warn('apiOrders is not an array in fallback, using empty array:', apiOrders)\r\n            this.orders = []\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching orders:', error)\r\n        this.orders = []\r\n      } finally {\r\n        this.loading = false\r\n      }\r\n    },\r\n\r\n    async fetchOrderById(id) {\r\n      this.loading = true\r\n      try {\r\n        const authStore = useAuthStore()\r\n        const cacheBuster = Date.now()\r\n        const response = await $fetch(`/api/orders/${id}?_t=${cacheBuster}`, {\r\n          headers: {\r\n            Authorization: `Bearer ${authStore.token}`,\r\n            'Cache-Control': 'no-cache',\r\n            'Pragma': 'no-cache'\r\n          }\r\n        })\r\n        \r\n        this.currentOrder = response.order || response\r\n        \r\n        // Also update the order in the orders array if it exists\r\n        const orderIndex = this.orders.findIndex(order => order.id === id)\r\n        if (orderIndex !== -1) {\r\n          this.orders[orderIndex] = this.currentOrder\r\n        }\r\n        \r\n        return this.currentOrder\r\n      } catch (error) {\r\n        console.error('Error fetching order:', error)\r\n        this.currentOrder = null\r\n        throw error\r\n      } finally {\r\n        this.loading = false\r\n      }\r\n    },\r\n\r\n    async refreshOrderById(id) {\r\n      try {\r\n        const authStore = useAuthStore()\r\n        const cacheBuster = Date.now()\r\n        const response = await $fetch(`/api/orders/${id}?_t=${cacheBuster}`, {\r\n          headers: {\r\n            Authorization: `Bearer ${authStore.token}`,\r\n            'Cache-Control': 'no-cache',\r\n            'Pragma': 'no-cache'\r\n          }\r\n        })\r\n        \r\n        const updatedOrder = response.order || response\r\n        \r\n        // Update the order in the orders array\r\n        const orderIndex = this.orders.findIndex(order => order.id === id)\r\n        if (orderIndex !== -1) {\r\n          this.orders[orderIndex] = updatedOrder\r\n          console.log(`Order ${id} status updated to:`, updatedOrder.status)\r\n        }\r\n        \r\n        return updatedOrder\r\n      } catch (error) {\r\n        console.error('Error refreshing order:', error)\r\n        throw error\r\n      }\r\n    },\r\n\r\n    checkForStatusChanges(previousOrders, currentOrders) {\r\n      try {\r\n        const { useNotificationsStore } = require('~/stores/notifications')\r\n        const notifications = useNotificationsStore()\r\n        \r\n        previousOrders.forEach(prevOrder => {\r\n          const currentOrder = currentOrders.find(order => order.id === prevOrder.id)\r\n          if (currentOrder && currentOrder.status !== prevOrder.status) {\r\n            console.log(`Order ${prevOrder.id} status changed from ${prevOrder.status} to ${currentOrder.status}`)\r\n            \r\n            // Show notification for status change\r\n            const statusMessages = {\r\n              'pending': 'Your order is pending confirmation',\r\n              'processing': 'Your order is being processed',\r\n              'shipped': 'Your order has been shipped',\r\n              'delivered': 'Your order has been delivered',\r\n              'cancelled': 'Your order has been cancelled'\r\n            }\r\n            \r\n            const message = statusMessages[currentOrder.status.toLowerCase()] || `Order status updated to ${currentOrder.status}`\r\n            notifications.success(`Order #${currentOrder.orderNumber}: ${message}`)\r\n          }\r\n        })\r\n      } catch (error) {\r\n        console.error('Error checking status changes:', error)\r\n      }\r\n    },\r\n\r\n    async updateOrderStatus(id, status) {\r\n      try {\r\n        const authStore = useAuthStore()\r\n        const response = await $fetch(`/api/orders/${id}/status`, {\r\n          method: 'PATCH',\r\n          body: { status },\r\n          headers: {\r\n            Authorization: `Bearer ${authStore.token}`\r\n          }\r\n        })\r\n        \r\n        const orderIndex = this.orders.findIndex(order => order.id === id)\r\n        if (orderIndex !== -1) {\r\n          this.orders[orderIndex] = response.order || response\r\n        }\r\n        \r\n        if (this.currentOrder && this.currentOrder.id === id) {\r\n          this.currentOrder = response.order || response\r\n        }\r\n        \r\n        return response\r\n      } catch (error) {\r\n        console.error('Error updating order status:', error)\r\n        throw error\r\n      }\r\n    },\r\n\r\n    async cancelOrder(id, reason = '') {\r\n      try {\r\n        const authStore = useAuthStore()\r\n        const response = await $fetch(`/api/orders/${id}/cancel`, {\r\n          method: 'POST',\r\n          body: { reason },\r\n          headers: {\r\n            Authorization: `Bearer ${authStore.token}`\r\n          }\r\n        })\r\n        \r\n        const orderIndex = this.orders.findIndex(order => order.id === id)\r\n        if (orderIndex !== -1) {\r\n          this.orders[orderIndex].status = 'cancelled'\r\n          this.orders[orderIndex].cancelReason = reason\r\n        }\r\n        \r\n        return response\r\n      } catch (error) {\r\n        console.error('Error cancelling order:', error)\r\n        throw error\r\n      }\r\n    },\r\n\r\n    async fetchOrderHistory(userId) {\r\n      this.loading = true\r\n      try {\r\n        const authStore = useAuthStore()\r\n        const response = await $fetch(`/api/users/${userId}/orders`, {\r\n          headers: {\r\n            Authorization: `Bearer ${authStore.token}`\r\n          }\r\n        })\r\n        \r\n        this.orderHistory = response.orders || response.data || []\r\n      } catch (error) {\r\n        console.error('Error fetching order history:', error)\r\n        this.orderHistory = []\r\n      } finally {\r\n        this.loading = false\r\n      }\r\n    },\r\n\r\n    async trackOrder(orderId) {\r\n      this.loading = true\r\n      try {\r\n        const authStore = useAuthStore()\r\n        const response = await $fetch(`/api/orders/${orderId}/tracking`, {\r\n          headers: {\r\n            Authorization: `Bearer ${authStore.token}`\r\n          }\r\n        })\r\n        \r\n        this.trackingInfo = response.tracking || response\r\n        return this.trackingInfo\r\n      } catch (error) {\r\n        console.error('Error tracking order:', error)\r\n        this.trackingInfo = null\r\n        throw error\r\n      } finally {\r\n        this.loading = false\r\n      }\r\n    },\r\n\r\n    async processPayment(orderId, paymentData) {\r\n      this.loading = true\r\n      try {\r\n        const authStore = useAuthStore()\r\n        const response = await $fetch(`/api/orders/${orderId}/payment`, {\r\n          method: 'POST',\r\n          body: paymentData,\r\n          headers: {\r\n            Authorization: `Bearer ${authStore.token}`\r\n          }\r\n        })\r\n        \r\n        // Update order status after successful payment\r\n        const orderIndex = this.orders.findIndex(order => order.id === orderId)\r\n        if (orderIndex !== -1) {\r\n          this.orders[orderIndex].paymentStatus = 'paid'\r\n          this.orders[orderIndex].status = 'confirmed'\r\n        }\r\n        \r\n        return response\r\n      } catch (error) {\r\n        console.error('Error processing payment:', error)\r\n        throw error\r\n      } finally {\r\n        this.loading = false\r\n      }\r\n    },\r\n\r\n    async reorderItems(orderId) {\r\n      try {\r\n        const authStore = useAuthStore()\r\n        \r\n        const response = await $fetch(`/api/orders/${orderId}/reorder`, {\r\n          method: 'POST',\r\n          headers: {\r\n            Authorization: `Bearer ${authStore.token}`\r\n          }\r\n        })\r\n        \r\n        // Add items to cart\r\n        try {\r\n          const { useCartStore } = await import('~/stores/cart')\r\n          const cartStore = useCartStore()\r\n          response.items.forEach(item => {\r\n            cartStore.addItem(item.product, item.quantity)\r\n          })\r\n        } catch (cartError) {\r\n          console.warn('Failed to add items to cart:', cartError)\r\n        }\r\n        \r\n        return response\r\n      } catch (error) {\r\n        console.error('Error reordering items:', error)\r\n        throw error\r\n      }\r\n    },\r\n\r\n    async downloadInvoice(orderId) {\r\n      try {\r\n        const authStore = useAuthStore()\r\n        const response = await $fetch(`/api/orders/${orderId}/invoice`, {\r\n          headers: {\r\n            Authorization: `Bearer ${authStore.token}`\r\n          }\r\n        })\r\n        \r\n        // Handle PDF download\r\n        if (process.client && response.downloadUrl) {\r\n          const link = document.createElement('a')\r\n          link.href = response.downloadUrl\r\n          link.download = `invoice-${orderId}.pdf`\r\n          link.click()\r\n        }\r\n        \r\n        return response\r\n      } catch (error) {\r\n        console.error('Error downloading invoice:', error)\r\n        throw error\r\n      }\r\n    },\r\n\r\n    clearCurrentOrder() {\r\n      this.currentOrder = null\r\n    },\r\n\r\n    clearTrackingInfo() {\r\n      this.trackingInfo = null\r\n    }\r\n  }\r\n})\r\n","<template>\r\n  <div class=\"min-h-screen bg-gray-50\">\r\n    <!-- Header -->\r\n    <div class=\"bg-white shadow-sm\">\r\n      <div class=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\r\n        <div class=\"py-6\">\r\n          <div class=\"flex items-center justify-between\">\r\n            <div>\r\n              <h1 class=\"text-3xl font-bold text-gray-900\">Order History</h1>\r\n              <p class=\"mt-1 text-sm text-gray-500\">View and track your orders</p>\r\n            </div>\r\n            <div class=\"flex items-center space-x-4\">\r\n              <div class=\"text-sm text-gray-500\">\r\n                Last updated: {{ lastRefreshTime }}\r\n              </div>\r\n              <button @click=\"downloadOrderHistory\" \r\n                      class=\"inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50\">\r\n                <svg class=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\r\n                </svg>\r\n                Download History\r\n              </button>\r\n              <button @click=\"refreshOrders\" \r\n                      :disabled=\"loading\"\r\n                      class=\"inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed\">\r\n                <svg v-if=\"loading\" class=\"animate-spin -ml-1 mr-2 h-4 w-4 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\r\n                  <circle class=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"4\"></circle>\r\n                  <path class=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\r\n                </svg>\r\n                <svg v-else class=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\r\n                </svg>\r\n                {{ loading ? 'Refreshing...' : 'Refresh Orders' }}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\r\n      <div class=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\r\n        \r\n        <!-- Sidebar -->\r\n        <div class=\"lg:col-span-1\">\r\n          <div class=\"bg-white rounded-lg shadow-sm p-6\">\r\n            <h3 class=\"font-semibold text-gray-900 mb-4\">Filter Orders</h3>\r\n            \r\n            <!-- Status Filter -->\r\n            <div class=\"mb-6\">\r\n              <label class=\"block text-sm font-medium text-gray-700 mb-2\">Order Status</label>\r\n              <select v-model=\"statusFilter\" \r\n                      class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 text-sm\">\r\n                <option value=\"\">All Orders</option>\r\n                <option value=\"pending\">Pending</option>\r\n                <option value=\"processing\">Processing</option>\r\n                <option value=\"shipped\">Shipped</option>\r\n                <option value=\"delivered\">Delivered</option>\r\n                <option value=\"cancelled\">Cancelled</option>\r\n              </select>\r\n            </div>\r\n\r\n            <!-- Date Range Filter -->\r\n            <div class=\"mb-6\">\r\n              <label class=\"block text-sm font-medium text-gray-700 mb-2\">Date Range</label>\r\n              <select v-model=\"dateFilter\" \r\n                      class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 text-sm\">\r\n                <option value=\"\">All Time</option>\r\n                <option value=\"last30\">Last 30 Days</option>\r\n                <option value=\"last90\">Last 90 Days</option>\r\n                <option value=\"lastyear\">Last Year</option>\r\n              </select>\r\n            </div>\r\n\r\n            <!-- Order Summary -->\r\n            <div class=\"border-t border-gray-200 pt-4\">\r\n              <h4 class=\"font-medium text-gray-900 mb-3\">Order Summary</h4>\r\n              <div class=\"space-y-2 text-sm\">\r\n                <div class=\"flex justify-between\">\r\n                  <span class=\"text-gray-500\">Total Orders:</span>\r\n                  <span class=\"font-medium\">{{ totalOrders }}</span>\r\n                </div>\r\n                <div class=\"flex justify-between\">\r\n                  <span class=\"text-gray-500\">Total Spent:</span>\r\n                  <span class=\"font-medium\">${{ (totalSpent || 0).toFixed(2) }}</span>\r\n                </div>\r\n                <div class=\"flex justify-between\">\r\n                  <span class=\"text-gray-500\">Avg. Order:</span>\r\n                  <span class=\"font-medium\">${{ (averageOrder || 0).toFixed(2) }}</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Quick Actions -->\r\n          <div class=\"bg-white rounded-lg shadow-sm p-6 mt-6\">\r\n            <h3 class=\"font-semibold text-gray-900 mb-4\">Quick Actions</h3>\r\n            <div class=\"space-y-3\">\r\n              <NuxtLink to=\"/track-order\" \r\n                       class=\"w-full inline-flex items-center justify-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50\">\r\n                <svg class=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7\" />\r\n                </svg>\r\n                Track Order\r\n              </NuxtLink>\r\n              <NuxtLink to=\"/return-policy\" \r\n                       class=\"w-full inline-flex items-center justify-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50\">\r\n                <svg class=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\r\n                </svg>\r\n                Return Policy\r\n              </NuxtLink>\r\n              <NuxtLink to=\"/contact\" \r\n                       class=\"w-full inline-flex items-center justify-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50\">\r\n                <svg class=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z\" />\r\n                </svg>\r\n                Support\r\n              </NuxtLink>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Orders List -->\r\n        <div class=\"lg:col-span-3\">\r\n          <!-- Search Bar -->\r\n          <div class=\"bg-white rounded-lg shadow-sm p-4 mb-6\">\r\n            <div class=\"relative\">\r\n              <input v-model=\"searchQuery\" \r\n                     type=\"text\" \r\n                     placeholder=\"Search orders by order number, product name...\" \r\n                     class=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500\">\r\n              <div class=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\r\n                <svg class=\"h-5 w-5 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\r\n                </svg>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Orders -->\r\n          <div v-if=\"loading\" class=\"text-center py-12\">\r\n            <div class=\"inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\r\n            <p class=\"mt-2 text-gray-500\">Loading orders...</p>\r\n          </div>\r\n\r\n          <div v-else-if=\"filteredOrders.length === 0\" class=\"bg-white rounded-lg shadow-sm p-12 text-center\">\r\n            <svg class=\"w-16 h-16 text-gray-400 mx-auto mb-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z\" />\r\n            </svg>\r\n            <h3 class=\"text-lg font-medium text-gray-900 mb-2\">No orders found</h3>\r\n            <p class=\"text-gray-500 mb-6\">You haven't placed any orders matching your filters.</p>\r\n            <NuxtLink to=\"/products\" \r\n                     class=\"inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700\">\r\n              Start Shopping\r\n            </NuxtLink>\r\n          </div>\r\n\r\n          <div v-else class=\"space-y-6\">\r\n            <div v-for=\"order in paginatedOrders\" :key=\"order.id\" \r\n                 class=\"bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden\">\r\n              \r\n              <!-- Order Header -->\r\n              <div class=\"bg-gray-50 px-6 py-4 border-b border-gray-200\">\r\n                <div class=\"flex items-center justify-between\">\r\n                  <div class=\"flex items-center space-x-6\">\r\n                    <div>\r\n                      <p class=\"text-sm font-medium text-gray-900\">Order #{{ order.orderNumber }}</p>\r\n                      <p class=\"text-sm text-gray-500\">Placed {{ formatDate(order.createdAt) }}</p>\r\n                    </div>\r\n                    <div>\r\n                      <p class=\"text-sm text-gray-500\">Total</p>\r\n                      <p class=\"text-sm font-medium text-gray-900\">${{ (order.total || order.totalAmount || 0).toFixed(2) }}</p>\r\n                    </div>\r\n                    <div>\r\n                      <p class=\"text-sm text-gray-500\">Status</p>\r\n                      <span class=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium\"\r\n                            :class=\"getOrderStatusClass(order.status)\">\r\n                        {{ order.status }}\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <!-- Order Items -->\r\n              <div class=\"px-6 py-4\">\r\n                <div class=\"space-y-3\">\r\n                  <div v-for=\"item in getOrderItems(order).slice(0, 3)\" :key=\"item.id || item.name\" \r\n                       class=\"flex items-center space-x-4\">\r\n                    <img :src=\"item.product?.images?.[0] || item.image || '/images/default-product.jpg'\" :alt=\"item.product?.name || item.name || 'Product'\" \r\n                         class=\"w-16 h-16 object-cover rounded-lg border border-gray-200\">\r\n                    <div class=\"flex-1 min-w-0\">\r\n                      <h4 class=\"text-sm font-medium text-gray-900 truncate\">{{ item.product?.name || item.name || 'Unknown Product' }}</h4>\r\n                      <p class=\"text-sm text-gray-500\">{{ item.product?.manufacturer || 'Unknown Brand' }}</p>\r\n                      <p class=\"text-sm text-gray-500\">Qty: {{ item.quantity }}</p>\r\n                    </div>\r\n                    <div class=\"text-sm font-medium text-gray-900\">\r\n                      ${{ ((item.price || 0) * (item.quantity || 0)).toFixed(2) }}\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div v-if=\"getOrderItems(order).length > 3\" class=\"text-sm text-gray-500 border-t border-gray-200 pt-3\">\r\n                    +{{ getOrderItems(order).length - 3 }} more items\r\n                  </div>\r\n                </div>\r\n\r\n                <!-- Quick Actions -->\r\n                <div class=\"flex items-center justify-between mt-4 pt-4 border-t border-gray-200\">\r\n                  <div class=\"flex items-center space-x-4 text-sm\">\r\n                    <span class=\"text-gray-500\">\r\n                      Delivered to: {{ order.shippingAddress?.name || 'Default Address' }}\r\n                    </span>\r\n                    <span v-if=\"order.estimatedDelivery\" class=\"text-gray-500\">\r\n                      • Est. delivery: {{ formatDate(order.estimatedDelivery) }}\r\n                    </span>\r\n                  </div>\r\n                  <div class=\"flex items-center space-x-2\">\r\n                    <button v-if=\"canReorder(order)\" \r\n                            @click=\"reorderItems(order)\" \r\n                            class=\"text-sm text-blue-600 hover:text-blue-500 font-medium\">\r\n                      Reorder\r\n                    </button>\r\n                    <button v-if=\"canReturn(order)\" \r\n                            @click=\"initiateReturn(order)\" \r\n                            class=\"text-sm text-blue-600 hover:text-blue-500 font-medium\">\r\n                      Return Items\r\n                    </button>\r\n                    <button @click=\"downloadInvoice(order)\" \r\n                            class=\"text-sm text-blue-600 hover:text-blue-500 font-medium\">\r\n                      Invoice\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Pagination -->\r\n          <div v-if=\"filteredOrders.length > itemsPerPage\" class=\"bg-white rounded-lg shadow-sm p-4 mt-6\">\r\n            <div class=\"flex items-center justify-between\">\r\n              <div class=\"text-sm text-gray-500\">\r\n                Showing {{ ((currentPage - 1) * itemsPerPage) + 1 }} to {{ Math.min(currentPage * itemsPerPage, filteredOrders.length) }} of {{ filteredOrders.length }} orders\r\n              </div>\r\n              <div class=\"flex items-center space-x-2\">\r\n                <button @click=\"currentPage--\" \r\n                        :disabled=\"currentPage === 1\"\r\n                        class=\"inline-flex items-center px-3 py-1.5 border border-gray-300 shadow-sm text-sm font-medium rounded text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed\">\r\n                  Previous\r\n                </button>\r\n                <div class=\"flex items-center space-x-1\">\r\n                  <button v-for=\"page in visiblePages\" :key=\"page\"\r\n                          @click=\"currentPage = page\"\r\n                          :class=\"page === currentPage ? 'bg-blue-600 text-white' : 'text-gray-700 hover:bg-gray-50'\"\r\n                          class=\"inline-flex items-center px-3 py-1.5 border border-gray-300 shadow-sm text-sm font-medium rounded\">\r\n                    {{ page }}\r\n                  </button>\r\n                </div>\r\n                <button @click=\"currentPage++\" \r\n                        :disabled=\"currentPage === totalPages\"\r\n                        class=\"inline-flex items-center px-3 py-1.5 border border-gray-300 shadow-sm text-sm font-medium rounded text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed\">\r\n                  Next\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed, onMounted, onUnmounted, watch } from 'vue'\r\nimport { useOrdersStore } from '~/stores/orders'\r\nimport { useNotificationsStore } from '~/stores/notifications'\r\nimport { useAuthStore } from '~/stores/auth'\r\n\r\ndefinePageMeta({\r\n  middleware: 'auth'\r\n})\r\n\r\nuseHead({\r\n  title: 'Order History - Long Châu',\r\n  meta: [\r\n    { name: 'description', content: 'View and track your order history, reorder items, and manage returns.' }\r\n  ]\r\n})\r\n\r\nconst ordersStore = useOrdersStore()\r\nconst notifications = useNotificationsStore()\r\nconst authStore = useAuthStore()\r\n\r\n// Helper function to get order items regardless of structure\r\nconst getOrderItems = (order) => {\r\n  const items = order.orderItems || order.items || []\r\n  console.log('getOrderItems called for order:', order.orderNumber, 'items:', items)\r\n  return items\r\n}\r\n\r\n// Check if current user is admin\r\nconst isAdmin = computed(() => {\r\n  const userRole = authStore.getUserRole\r\n  console.log('Current user role:', userRole, 'Is admin:', userRole === 'ADMIN' || userRole === 'admin')\r\n  return userRole === 'ADMIN' || userRole === 'admin'\r\n})\r\n\r\n// Reactive data\r\nconst loading = ref(false)\r\nconst searchQuery = ref('')\r\nconst statusFilter = ref('')\r\nconst dateFilter = ref('')\r\nconst currentPage = ref(1)\r\nconst itemsPerPage = 10\r\nconst lastRefreshTime = ref('')\r\n\r\n// Load orders from API\r\nconst orders = computed(() => ordersStore.orders || [])\r\n\r\n// Computed properties\r\nconst filteredOrders = computed(() => {\r\n  let filtered = orders.value\r\n\r\n  // Filter by search query\r\n  if (searchQuery.value) {\r\n    const query = searchQuery.value.toLowerCase()\r\n    filtered = filtered.filter(order => \r\n      order.orderNumber?.toLowerCase().includes(query) ||\r\n      getOrderItems(order).some(item => \r\n        (item.product?.name || item.name || '').toLowerCase().includes(query)\r\n      )\r\n    )\r\n  }\r\n\r\n  // Filter by status\r\n  if (statusFilter.value) {\r\n    filtered = filtered.filter(order => order.status === statusFilter.value)\r\n  }\r\n\r\n  // Filter by date range\r\n  if (dateFilter.value) {\r\n    const now = new Date()\r\n    const filterDate = new Date()\r\n    \r\n    switch (dateFilter.value) {\r\n      case 'last30':\r\n        filterDate.setDate(now.getDate() - 30)\r\n        break\r\n      case 'last90':\r\n        filterDate.setDate(now.getDate() - 90)\r\n        break\r\n      case 'lastyear':\r\n        filterDate.setFullYear(now.getFullYear() - 1)\r\n        break\r\n    }\r\n    \r\n    filtered = filtered.filter(order => new Date(order.createdAt) >= filterDate)\r\n  }\r\n\r\n  return filtered.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))\r\n})\r\n\r\nconst paginatedOrders = computed(() => {\r\n  const start = (currentPage.value - 1) * itemsPerPage\r\n  const end = start + itemsPerPage\r\n  return filteredOrders.value.slice(start, end)\r\n})\r\n\r\nconst totalPages = computed(() => Math.ceil(filteredOrders.value.length / itemsPerPage))\r\n\r\nconst totalOrders = computed(() => orders.value.length)\r\nconst totalSpent = computed(() => orders.value.reduce((sum, order) => sum + (order.total || order.totalAmount || 0), 0))\r\nconst averageOrder = computed(() => totalOrders.value > 0 ? totalSpent.value / totalOrders.value : 0)\r\n\r\n// Methods\r\nconst formatDate = (dateString) => {\r\n  return new Date(dateString).toLocaleDateString('en-US', {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric'\r\n  })\r\n}\r\n\r\nconst getOrderStatusClass = (status) => {\r\n  const classes = {\r\n    'pending': 'bg-yellow-100 text-yellow-800',\r\n    'processing': 'bg-blue-100 text-blue-800',\r\n    'shipped': 'bg-purple-100 text-purple-800',\r\n    'delivered': 'bg-green-100 text-green-800',\r\n    'cancelled': 'bg-red-100 text-red-800'\r\n  }\r\n  return classes[status?.toLowerCase()] || 'bg-gray-100 text-gray-800'\r\n}\r\n\r\nconst viewOrderDetails = (order) => {\r\n  navigateTo(`/account/orders/${order.id}`)\r\n}\r\n\r\nconst trackOrder = (order) => {\r\n  navigateTo(`/track-order?order=${order.orderNumber}`)\r\n}\r\n\r\nconst canTrackOrder = (order) => {\r\n  return ['processing', 'shipped'].includes(order.status?.toLowerCase())\r\n}\r\n\r\nconst downloadInvoice = async (order) => {\r\n  try {\r\n    notifications.info('Downloading invoice...')\r\n    // Implementation for invoice download\r\n    notifications.success('Invoice downloaded successfully')\r\n  } catch (error) {\r\n    console.error('Error downloading invoice:', error)\r\n    notifications.error('Failed to download invoice. Please try again.')\r\n  }\r\n}\r\n\r\nconst downloadOrderHistory = async () => {\r\n  try {\r\n    if (filteredOrders.value.length === 0) {\r\n      notifications.warning('No orders to download')\r\n      return\r\n    }\r\n    \r\n    notifications.info('Preparing order history...')\r\n    // Implementation for order history download\r\n    notifications.success('Order history downloaded successfully')\r\n  } catch (error) {\r\n    console.error('Error downloading order history:', error)\r\n    notifications.error('Failed to download order history. Please try again.')\r\n  }\r\n}\r\n\r\nconst refreshOrders = async () => {\r\n  loading.value = true\r\n  try {\r\n    console.log('Manual refresh: Loading orders...')\r\n    await ordersStore.fetchOrders()\r\n    console.log('Manual refresh: Orders loaded:', ordersStore.orders.length)\r\n    lastRefreshTime.value = new Date().toLocaleTimeString()\r\n    notifications.success('Orders refreshed successfully')\r\n  } catch (error) {\r\n    console.error('Error refreshing orders:', error)\r\n    notifications.error('Failed to refresh orders. Please try again.')\r\n  } finally {\r\n    loading.value = false\r\n  }\r\n}\r\n\r\n// Missing functions that need to be implemented:\r\n\r\nconst canReorder = (order) => {\r\n  // Check if order can be reordered\r\n  const reorderableStatuses = ['delivered', 'completed']\r\n  return reorderableStatuses.includes(order.status?.toLowerCase())\r\n}\r\n\r\nconst reorderItems = async (order) => {\r\n  try {\r\n    notifications.info('Adding items to cart...')\r\n    await ordersStore.reorderItems(order.id)\r\n    notifications.success('Items added to cart successfully!')\r\n    // Optionally redirect to cart\r\n    // navigateTo('/cart')\r\n  } catch (error) {\r\n    console.error('Error reordering items:', error)\r\n    notifications.error('Failed to reorder items. Please try again.')\r\n  }\r\n}\r\n\r\nconst canReturn = (order) => {\r\n  // Check if order can be returned\r\n  const returnableStatuses = ['delivered', 'completed']\r\n  if (!returnableStatuses.includes(order.status?.toLowerCase())) {\r\n    return false\r\n  }\r\n  \r\n  // Check if order is within return window (e.g., 30 days)\r\n  const orderDate = new Date(order.createdAt)\r\n  const now = new Date()\r\n  const daysDifference = Math.floor((now - orderDate) / (1000 * 60 * 60 * 24))\r\n  \r\n  return daysDifference <= 30 // 30-day return policy\r\n}\r\n\r\nconst initiateReturn = (order) => {\r\n  // Navigate to return initiation page or show return modal\r\n  navigateTo(`/returns/initiate?orderId=${order.id}`)\r\n}\r\n\r\nconst visiblePages = computed(() => {\r\n  const pages = []\r\n  const total = totalPages.value\r\n  const current = currentPage.value\r\n  \r\n  if (total <= 7) {\r\n    // Show all pages if total is 7 or less\r\n    for (let i = 1; i <= total; i++) {\r\n      pages.push(i)\r\n    }\r\n  } else {\r\n    // Show current page with 2 pages before and after, plus first and last\r\n    const start = Math.max(1, current - 2)\r\n    const end = Math.min(total, current + 2)\r\n    \r\n    for (let i = start; i <= end; i++) {\r\n      pages.push(i)\r\n    }\r\n    \r\n    // Add first page if not already included\r\n    if (start > 1) {\r\n      pages.unshift(1)\r\n      if (start > 2) {\r\n        pages.splice(1, 0, '...')\r\n      }\r\n    }\r\n    \r\n    // Add last page if not already included\r\n    if (end < total) {\r\n      if (end < total - 1) {\r\n        pages.push('...')\r\n      }\r\n      pages.push(total)\r\n    }\r\n  }\r\n  \r\n  return pages\r\n})\r\n\r\n// Load orders on mount\r\nonMounted(async () => {\r\n  loading.value = true\r\n  try {\r\n    console.log('Orders page: Loading orders...')\r\n    await ordersStore.fetchOrders()\r\n    console.log('Orders page: Orders loaded:', ordersStore.orders.length)\r\n    lastRefreshTime.value = new Date().toLocaleTimeString()\r\n    // Debug: log the structure of the first order\r\n    if (ordersStore.orders.length > 0) {\r\n      console.log('First order structure:', ordersStore.orders[0])\r\n      console.log('First order items property:', ordersStore.orders[0].items || ordersStore.orders[0].orderItems)\r\n    }\r\n  } catch (error) {\r\n    console.error('Error loading orders:', error)\r\n    notifications.error('Failed to load orders')\r\n  } finally {\r\n    loading.value = false\r\n  }\r\n\r\n  // Set up auto-refresh every 30 seconds\r\n  const autoRefreshInterval = setInterval(async () => {\r\n    try {\r\n      console.log('Auto-refresh: Checking for order updates...')\r\n      await ordersStore.fetchOrders()\r\n      lastRefreshTime.value = new Date().toLocaleTimeString()\r\n      console.log('Auto-refresh completed at:', lastRefreshTime.value)\r\n    } catch (error) {\r\n      console.error('Auto-refresh error:', error)\r\n    }\r\n  }, 30000) // 30 seconds\r\n\r\n  // Clean up interval when component unmounts\r\n  onUnmounted(() => {\r\n    if (autoRefreshInterval) {\r\n      clearInterval(autoRefreshInterval)\r\n    }\r\n  })\r\n})\r\n\r\n// Reset to first page when filters change\r\nwatch([searchQuery, statusFilter, dateFilter], () => {\r\n  currentPage.value = 1\r\n})\r\n</script>\r\n"],"version":3}