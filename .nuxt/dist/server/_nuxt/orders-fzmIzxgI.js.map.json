{"file":"orders-fzmIzxgI.js","mappings":";;;;;;;;;;;;;;;;;;AA4VA,YAAQ;AAAA,MACN,OAAO;AAAA,IACT,CAAC;AAEiB,iBAAc;AAGhC,UAAM,SAAS,IAAI,EAAE;AACrB,UAAM,cAAc,IAAI,CAAC;AACzB,UAAM,cAAc,IAAI,CAAC;AACzB,UAAM,eAAe,IAAI,EAAE;AAC3B,UAAM,gBAAgB,IAAI,IAAI;AAC9B,UAAM,UAAU,IAAI,KAAK;AACzB,UAAM,wBAAwB,IAAI,KAAK;AACvC,UAAM,gBAAgB,IAAI,IAAI;AAC9B,UAAM,YAAY,IAAI,EAAE;AACxB,UAAM,WAAW,IAAI,KAAK;AAE1B,UAAM,UAAU,IAAI;AAAA,MAClB,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,QAAQ;AAAA,IACV,CAAC;AAkFD,UAAM,aAAa,CAAC,SAAS;AAC3B,aAAO,IAAI,KAAK,IAAI,EAAE,mBAAmB,SAAS;AAAA,QAChD,MAAM;AAAA,QACN,OAAO;AAAA,QACP,KAAK;AAAA,MACT,CAAG;AAAA,IACH;AAEA,UAAM,wBAAwB,CAAC,oBAAoB;;AACjD,UAAI,CAAC,gBAAiB,QAAO;AAE7B,UAAI;AAEF,cAAM,OAAO,OAAO,oBAAoB,WAAW,KAAK,MAAM,eAAe,IAAI;AAEjF,YAAI,mBAAmB;AAGvB,YAAI,KAAK,aAAa,KAAK,UAAU;AACnC,8BAAoB,GAAG,KAAK,aAAa,EAAE,IAAI,KAAK,YAAY,EAAE,GAAG,KAAM,IAAG;AAAA,QAC/E;AAGD,YAAI,KAAK,SAAS;AAChB,8BAAoB,KAAK,UAAU;AAAA,QACpC;AAGD,YAAI,WAAW;AACf,YAAI,KAAK,KAAM,aAAY,KAAK;AAChC,YAAI,KAAK,MAAO,cAAa,WAAW,OAAO,MAAM,KAAK;AAC1D,YAAI,KAAK,QAAS,cAAa,WAAW,MAAM,MAAM,KAAK;AAC3D,YAAI,SAAU,qBAAoB,WAAW;AAG7C,YAAI,KAAK,SAAS;AAChB,gBAAM,eAAe;AAAA,YACnB,MAAM;AAAA,YACN,MAAM;AAAA,YACN,MAAM;AAAA,YACN,MAAM;AAAA,UACP;AACD,8BAAqB,aAAa,KAAK,OAAO,KAAK,KAAK;AAAA,QACzD;AAGD,YAAI,KAAK,SAAS,KAAK,YAAU,mBAAc,UAAd,mBAAqB,gBAAe;AACnE,8BAAoB,yBAAyB,KAAK;AAAA,QACnD;AAED,YAAI,KAAK,qBAAqB;AAC5B,8BAAoB,+BAA+B,KAAK;AAAA,QACzD;AAED,eAAO,iBAAiB,KAAM;AAAA,MAC/B,SAAQ,OAAO;AACd,gBAAQ,MAAM,sCAAsC,KAAK;AACzD,eAAO;AAAA,MACR;AAAA,IACH;AAEA,UAAM,iBAAiB,CAAC,WAAW;AACjC,YAAM,gBAAgB;AAAA,QACpB,SAAS;AAAA,QACT,YAAY;AAAA,QACZ,SAAS;AAAA,QACT,WAAW;AAAA,QACX,WAAW;AAAA,MACZ;AACD,aAAO,cAAc,MAAM,KAAK;AAAA,IAClC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["../../../../pages/admin/orders.vue"],"sourcesContent":["<template>\r\n  <div class=\"min-h-screen bg-gray-50\">\r\n    <!-- Header -->\r\n    <div class=\"bg-white shadow-sm border-b\">\r\n      <div class=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\r\n        <div class=\"py-6\">\r\n          <div class=\"flex items-center justify-between\">\r\n            <div>\r\n              <h1 class=\"text-3xl font-bold text-gray-900\">Order Management</h1>\r\n              <p class=\"mt-1 text-sm text-gray-500\">View and manage all customer orders</p>\r\n            </div>\r\n            <div class=\"flex items-center space-x-4\">\r\n              <span class=\"inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800\">\r\n                {{ totalOrders }} Total Orders\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\r\n      <!-- Filters -->\r\n      <div class=\"bg-white rounded-lg shadow-sm p-6 mb-6\">\r\n        <div class=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n          <div>\r\n            <label class=\"block text-sm font-medium text-gray-700 mb-2\">Status</label>\r\n            <select v-model=\"filters.status\" class=\"w-full border border-gray-300 rounded-md px-3 py-2\">\r\n              <option value=\"\">All Status</option>\r\n              <option value=\"pending\">Pending</option>\r\n              <option value=\"processing\">Processing</option>\r\n              <option value=\"shipped\">Shipped</option>\r\n              <option value=\"delivered\">Delivered</option>\r\n              <option value=\"cancelled\">Cancelled</option>\r\n            </select>\r\n          </div>\r\n          <div>\r\n            <label class=\"block text-sm font-medium text-gray-700 mb-2\">Date Range</label>\r\n            <input \r\n              v-model=\"filters.dateFrom\" \r\n              type=\"date\" \r\n              class=\"w-full border border-gray-300 rounded-md px-3 py-2\"\r\n            />\r\n          </div>\r\n          <div>\r\n            <label class=\"block text-sm font-medium text-gray-700 mb-2\">To</label>\r\n            <input \r\n              v-model=\"filters.dateTo\" \r\n              type=\"date\" \r\n              class=\"w-full border border-gray-300 rounded-md px-3 py-2\"\r\n            />\r\n          </div>\r\n          <div class=\"flex items-end\">\r\n            <button \r\n              @click=\"loadOrders\"\r\n              :disabled=\"loading\"\r\n              class=\"w-full bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 disabled:opacity-50\"\r\n            >\r\n              {{ loading ? 'Loading...' : 'Apply Filters' }}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Orders Table -->\r\n      <div class=\"bg-white rounded-lg shadow-sm overflow-hidden\">\r\n        <div class=\"overflow-x-auto\">\r\n          <table class=\"min-w-full divide-y divide-gray-200\">\r\n            <thead class=\"bg-gray-50\">\r\n              <tr>\r\n                <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Order ID\r\n                </th>\r\n                <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Customer\r\n                </th>\r\n                <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Date\r\n                </th>\r\n                <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Items\r\n                </th>\r\n                <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Total\r\n                </th>\r\n                <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Status\r\n                </th>\r\n                <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Actions\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody class=\"bg-white divide-y divide-gray-200\">\r\n              <tr v-if=\"loading\">\r\n                <td colspan=\"7\" class=\"px-6 py-8 text-center text-gray-500\">\r\n                  <div class=\"flex items-center justify-center space-x-2\">\r\n                    <svg class=\"animate-spin h-5 w-5 text-blue-600\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\r\n                      <circle class=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"4\"></circle>\r\n                      <path class=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\r\n                    </svg>\r\n                    <span>Loading orders...</span>\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n              <tr v-else-if=\"orders.length === 0\">\r\n                <td colspan=\"7\" class=\"px-6 py-8 text-center text-gray-500\">\r\n                  No orders found. Try adjusting your filters.\r\n                </td>\r\n              </tr>\r\n              <tr v-else v-for=\"order in orders\" :key=\"order.id\" class=\"hover:bg-gray-50\">\r\n                <td class=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\r\n                  #{{ order.id }}\r\n                </td>\r\n                <td class=\"px-6 py-4 whitespace-nowrap\">\r\n                  <div class=\"text-sm font-medium text-gray-900\">{{ order.customerName }}</div>\r\n                  <div class=\"text-sm text-gray-500\">{{ order.customerEmail }}</div>\r\n                </td>\r\n                <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n                  {{ formatDate(order.createdAt) }}\r\n                </td>\r\n                <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\r\n                  {{ order.itemCount }} items\r\n                </td>\r\n                <td class=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\r\n                  ${{ order.total.toFixed(2) }}\r\n                </td>\r\n                <td class=\"px-6 py-4 whitespace-nowrap\">\r\n                  <span :class=\"getStatusClass(order.status)\" class=\"inline-flex px-2 py-1 text-xs font-semibold rounded-full\">\r\n                    {{ order.status }}\r\n                  </span>\r\n                </td>\r\n                <td class=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\r\n                  <div class=\"flex space-x-2\">\r\n                    <button @click=\"viewOrder(order)\" class=\"text-blue-600 hover:text-blue-900\">\r\n                      View\r\n                    </button>\r\n                    <button @click=\"updateOrderStatus(order)\" class=\"text-green-600 hover:text-green-900\">\r\n                      Update\r\n                    </button>\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n\r\n        <!-- Pagination -->\r\n        <div class=\"bg-gray-50 px-6 py-3 flex items-center justify-between\">\r\n          <div class=\"text-sm text-gray-700\">\r\n            Showing {{ (currentPage - 1) * itemsPerPage + 1 }} to {{ Math.min(currentPage * itemsPerPage, totalOrders) }} of {{ totalOrders }} orders\r\n          </div>\r\n          <div class=\"flex space-x-2\">\r\n            <button \r\n              @click=\"currentPage--; loadOrders()\" \r\n              :disabled=\"currentPage === 1 || loading\"\r\n              class=\"px-3 py-1 border border-gray-300 rounded-md text-sm disabled:opacity-50\"\r\n            >\r\n              Previous\r\n            </button>\r\n            <button \r\n              @click=\"currentPage++; loadOrders()\" \r\n              :disabled=\"currentPage * itemsPerPage >= totalOrders || loading\"\r\n              class=\"px-3 py-1 border border-gray-300 rounded-md text-sm disabled:opacity-50\"\r\n            >\r\n              Next\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Order Details Modal -->\r\n    <div v-if=\"selectedOrder\" class=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\" @click=\"selectedOrder = null\">\r\n      <div class=\"bg-white rounded-lg max-w-4xl w-full mx-4 max-h-[90vh] overflow-y-auto\" @click.stop>\r\n        <div class=\"p-6\">\r\n          <div class=\"flex justify-between items-center mb-6\">\r\n            <h3 class=\"text-xl font-semibold text-gray-900\">Order #{{ selectedOrder.id }}</h3>\r\n            <button @click=\"selectedOrder = null\" class=\"text-gray-400 hover:text-gray-600\">\r\n              <svg class=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path>\r\n              </svg>\r\n            </button>\r\n          </div>\r\n          \r\n          <div class=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\r\n            <!-- Customer Information -->\r\n            <div class=\"space-y-4\">\r\n              <div>\r\n                <h4 class=\"text-lg font-medium text-gray-900 mb-3\">Customer Information</h4>\r\n                <div class=\"bg-gray-50 p-4 rounded-lg space-y-2\">\r\n                  <div class=\"flex justify-between\">\r\n                    <span class=\"font-medium text-gray-700\">Name:</span>\r\n                    <span class=\"text-gray-900\">{{ selectedOrder.customerName }}</span>\r\n                  </div>\r\n                  <div class=\"flex justify-between\">\r\n                    <span class=\"font-medium text-gray-700\">Email:</span>\r\n                    <span class=\"text-gray-900\">{{ selectedOrder.customerEmail }}</span>\r\n                  </div>\r\n                  <div class=\"flex justify-between\" v-if=\"selectedOrder.customerPhone\">\r\n                    <span class=\"font-medium text-gray-700\">Phone:</span>\r\n                    <span class=\"text-gray-900\">{{ selectedOrder.customerPhone }}</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <!-- Order Information -->\r\n              <div>\r\n                <h4 class=\"text-lg font-medium text-gray-900 mb-3\">Order Information</h4>\r\n                <div class=\"bg-gray-50 p-4 rounded-lg space-y-2\">\r\n                  <div class=\"flex justify-between\">\r\n                    <span class=\"font-medium text-gray-700\">Order Date:</span>\r\n                    <span class=\"text-gray-900\">{{ formatDate(selectedOrder.createdAt) }}</span>\r\n                  </div>\r\n                  <div class=\"flex justify-between\">\r\n                    <span class=\"font-medium text-gray-700\">Status:</span>\r\n                    <span :class=\"getStatusClass(selectedOrder.status)\" class=\"inline-flex px-2 py-1 text-xs font-semibold rounded-full\">\r\n                      {{ selectedOrder.status.toUpperCase() }}\r\n                    </span>\r\n                  </div>\r\n                  <div class=\"flex justify-between\">\r\n                    <span class=\"font-medium text-gray-700\">Total Items:</span>\r\n                    <span class=\"text-gray-900\">{{ selectedOrder.itemCount }}</span>\r\n                  </div>\r\n                  <div class=\"flex justify-between\" v-if=\"selectedOrder.trackingNumber\">\r\n                    <span class=\"font-medium text-gray-700\">Tracking Number:</span>\r\n                    <span class=\"text-gray-900 font-mono\">{{ selectedOrder.trackingNumber }}</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <!-- Order Items -->\r\n            <div>\r\n              <h4 class=\"text-lg font-medium text-gray-900 mb-3\">Order Items</h4>\r\n              <div class=\"bg-gray-50 p-4 rounded-lg\">\r\n                <div class=\"space-y-3\">\r\n                  <div v-for=\"item in selectedOrder.items\" :key=\"item.id\" class=\"flex justify-between items-center p-3 bg-white rounded border\">\r\n                    <div class=\"flex-1\">\r\n                      <div class=\"font-medium text-gray-900\">{{ item.name }}</div>\r\n                      <div class=\"text-sm text-gray-500\" v-if=\"item.manufacturer\">{{ item.manufacturer }}</div>\r\n                      <div class=\"text-sm text-gray-600\">Quantity: {{ item.quantity }}</div>\r\n                      <div class=\"text-sm text-gray-600\">Unit Price: ${{ item.price.toFixed(2) }}</div>\r\n                    </div>\r\n                    <div class=\"text-right\">\r\n                      <div class=\"font-semibold text-gray-900\">${{ (item.price * item.quantity).toFixed(2) }}</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                \r\n                <div class=\"border-t mt-4 pt-4\">\r\n                  <div class=\"flex justify-between items-center\">\r\n                    <span class=\"text-lg font-semibold text-gray-900\">Total:</span>\r\n                    <span class=\"text-lg font-bold text-gray-900\">${{ selectedOrder.total.toFixed(2) }}</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Shipping Address - Full Width -->\r\n          <div v-if=\"selectedOrder.shippingAddress\" class=\"mb-6\">\r\n            <h4 class=\"text-lg font-medium text-gray-900 mb-3\">Shipping Address</h4>\r\n            <div class=\"bg-gray-50 p-4 rounded-lg\">\r\n              <p class=\"text-gray-900 whitespace-pre-line\">{{ formatShippingAddress(selectedOrder.shippingAddress) }}</p>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Action Buttons -->\r\n          <div class=\"flex justify-end mt-6 pt-6 border-t\">\r\n            <button @click=\"selectedOrder = null\" \r\n                    class=\"px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50\">\r\n              Close\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Status Update Modal -->\r\n    <div v-if=\"showStatusUpdateModal\" class=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\" @click=\"showStatusUpdateModal = false\">\r\n      <div class=\"bg-white rounded-lg max-w-md w-full mx-4\" @click.stop>\r\n        <div class=\"p-6\">\r\n          <div class=\"flex justify-between items-center mb-4\">\r\n            <h3 class=\"text-lg font-medium text-gray-900\">Update Order Status</h3>\r\n            <button @click=\"showStatusUpdateModal = false\" class=\"text-gray-400 hover:text-gray-600\">\r\n              <svg class=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path>\r\n              </svg>\r\n            </button>\r\n          </div>\r\n          \r\n          <div class=\"space-y-4\">\r\n            <div>\r\n              <label class=\"block text-sm font-medium text-gray-700 mb-2\">Order ID</label>\r\n              <input type=\"text\" :value=\"`#${orderToUpdate?.id}`\" readonly \r\n                     class=\"w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-50 text-gray-500\">\r\n            </div>\r\n            \r\n            <div>\r\n              <label class=\"block text-sm font-medium text-gray-700 mb-2\">Customer</label>\r\n              <input type=\"text\" :value=\"orderToUpdate?.customerName\" readonly \r\n                     class=\"w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-50 text-gray-500\">\r\n            </div>\r\n            \r\n            <div>\r\n              <label class=\"block text-sm font-medium text-gray-700 mb-2\">Current Status</label>\r\n              <span :class=\"getStatusClass(orderToUpdate?.status)\" \r\n                    class=\"inline-flex px-3 py-1 text-sm font-semibold rounded-full\">\r\n                {{ orderToUpdate?.status?.toUpperCase() }}\r\n              </span>\r\n            </div>\r\n            \r\n            <div>\r\n              <label class=\"block text-sm font-medium text-gray-700 mb-2\">New Status</label>\r\n              <select v-model=\"newStatus\" class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500\">\r\n                <option value=\"pending\">PENDING</option>\r\n                <option value=\"processing\">PROCESSING</option>\r\n                <option value=\"shipped\">SHIPPED</option>\r\n                <option value=\"delivered\">DELIVERED</option>\r\n                <option value=\"cancelled\">CANCELLED</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"flex justify-end space-x-3 mt-6\">\r\n            <button @click=\"showStatusUpdateModal = false\" \r\n                    class=\"px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50\">\r\n              Cancel\r\n            </button>\r\n            <button @click=\"confirmStatusUpdate\" :disabled=\"updating || newStatus === orderToUpdate?.status\"\r\n                    class=\"px-4 py-2 bg-blue-600 text-white rounded-md text-sm font-medium hover:bg-blue-700 disabled:opacity-50\">\r\n              {{ updating ? 'Updating...' : 'Update Status' }}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { useAuthStore } from '~/stores/auth'\r\n\r\ndefinePageMeta({\r\n  middleware: 'admin'\r\n})\r\n\r\nuseHead({\r\n  title: 'Orders - Admin - Long Châu'\r\n})\r\n\r\nconst authStore = useAuthStore()\r\n\r\n// Reactive data\r\nconst orders = ref([])\r\nconst totalOrders = ref(0)\r\nconst currentPage = ref(1)\r\nconst itemsPerPage = ref(20)\r\nconst selectedOrder = ref(null)\r\nconst loading = ref(false)\r\nconst showStatusUpdateModal = ref(false)\r\nconst orderToUpdate = ref(null)\r\nconst newStatus = ref('')\r\nconst updating = ref(false)\r\n\r\nconst filters = ref({\r\n  status: '',\r\n  dateFrom: '',\r\n  dateTo: ''\r\n})\r\n\r\n// Load orders from database\r\nconst loadOrders = async () => {\r\n  loading.value = true\r\n  try {\r\n    if (!authStore.token) {\r\n      throw new Error('No authentication token')\r\n    }\r\n\r\n    // Build query parameters\r\n    const params = new URLSearchParams({\r\n      page: currentPage.value.toString(),\r\n      limit: itemsPerPage.value.toString()\r\n    })\r\n\r\n    // Add filters\r\n    if (filters.value.status) {\r\n      params.append('status', filters.value.status.toUpperCase())\r\n    }\r\n    if (filters.value.dateFrom) {\r\n      params.append('dateFrom', filters.value.dateFrom)\r\n    }\r\n    if (filters.value.dateTo) {\r\n      params.append('dateTo', filters.value.dateTo)\r\n    }\r\n\r\n    // Make API call using $fetch\r\n    const response = await $fetch(`/api/admin/orders?${params.toString()}`, {\r\n      headers: {\r\n        'Authorization': `Bearer ${authStore.token}`\r\n      }\r\n    })\r\n\r\n    console.log('API Response:', response) // Debug log\r\n\r\n    console.log('API Response:', response) // Debug log\r\n\r\n    if (response.success) {\r\n      console.log('Orders data:', response.orders) // Debug log\r\n      // Transform the data to match the frontend format\r\n      orders.value = response.orders.map(order => ({\r\n        id: order.id,\r\n        customerName: `${order.user.firstName} ${order.user.lastName}`,\r\n        customerEmail: order.user.email,\r\n        customerPhone: order.user.phone || '',\r\n        createdAt: new Date(order.createdAt),\r\n        itemCount: order.orderItems.length,\r\n        total: parseFloat(order.totalAmount || '0'),\r\n        status: order.status.toLowerCase(),\r\n        items: order.orderItems.map(item => ({\r\n          id: item.id,\r\n          name: item.product.name,\r\n          quantity: item.quantity,\r\n          price: parseFloat(item.price || '0'),\r\n          manufacturer: item.product.manufacturer\r\n        })),\r\n        shippingAddress: (() => {\r\n          try {\r\n            if (!order.shippingAddress) return null\r\n            return typeof order.shippingAddress === 'string' ? JSON.parse(order.shippingAddress) : order.shippingAddress\r\n          } catch (error) {\r\n            console.error('Error parsing shipping address for order', order.id, error)\r\n            return null\r\n          }\r\n        })(),\r\n        trackingNumber: order.trackingNumber\r\n      }))\r\n      \r\n      totalOrders.value = response.pagination.totalCount\r\n      console.log('Transformed orders:', orders.value) // Debug log\r\n    }\r\n  } catch (error) {\r\n    console.error('Error loading orders:', error)\r\n    // Show error to user\r\n    alert('Failed to load orders. Please try again.')\r\n  } finally {\r\n    loading.value = false\r\n  }\r\n}\r\n\r\n// Methods\r\nconst formatDate = (date) => {\r\n  return new Date(date).toLocaleDateString('en-US', {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric'\r\n  })\r\n}\r\n\r\nconst formatShippingAddress = (shippingAddress) => {\r\n  if (!shippingAddress) return 'No shipping address provided'\r\n  \r\n  try {\r\n    // Handle if it's still a string\r\n    const addr = typeof shippingAddress === 'string' ? JSON.parse(shippingAddress) : shippingAddress\r\n    \r\n    let formattedAddress = ''\r\n    \r\n    // Name\r\n    if (addr.firstName || addr.lastName) {\r\n      formattedAddress += `${addr.firstName || ''} ${addr.lastName || ''}`.trim() + '\\n'\r\n    }\r\n    \r\n    // Street address\r\n    if (addr.address) {\r\n      formattedAddress += addr.address + '\\n'\r\n    }\r\n    \r\n    // City, State, ZIP\r\n    let cityLine = ''\r\n    if (addr.city) cityLine += addr.city\r\n    if (addr.state) cityLine += (cityLine ? ', ' : '') + addr.state\r\n    if (addr.zipCode) cityLine += (cityLine ? ' ' : '') + addr.zipCode\r\n    if (cityLine) formattedAddress += cityLine + '\\n'\r\n    \r\n    // Country\r\n    if (addr.country) {\r\n      const countryNames = {\r\n        'US': 'United States',\r\n        'VN': 'Vietnam',\r\n        'CA': 'Canada',\r\n        'UK': 'United Kingdom'\r\n      }\r\n      formattedAddress += (countryNames[addr.country] || addr.country)\r\n    }\r\n    \r\n    // Additional info\r\n    if (addr.phone && addr.phone !== selectedOrder.value?.customerPhone) {\r\n      formattedAddress += '\\n\\nDelivery Phone: ' + addr.phone\r\n    }\r\n    \r\n    if (addr.specialInstructions) {\r\n      formattedAddress += '\\n\\nSpecial Instructions: ' + addr.specialInstructions\r\n    }\r\n    \r\n    return formattedAddress.trim()\r\n  } catch (error) {\r\n    console.error('Error formatting shipping address:', error)\r\n    return 'Error displaying shipping address'\r\n  }\r\n}\r\n\r\nconst getStatusClass = (status) => {\r\n  const statusClasses = {\r\n    pending: 'bg-yellow-100 text-yellow-800',\r\n    processing: 'bg-blue-100 text-blue-800',\r\n    shipped: 'bg-purple-100 text-purple-800',\r\n    delivered: 'bg-green-100 text-green-800',\r\n    cancelled: 'bg-red-100 text-red-800'\r\n  }\r\n  return statusClasses[status] || 'bg-gray-100 text-gray-800'\r\n}\r\n\r\nconst viewOrder = (order) => {\r\n  selectedOrder.value = order\r\n}\r\n\r\nconst updateOrderStatus = async (order) => {\r\n  orderToUpdate.value = order\r\n  newStatus.value = order.status\r\n  showStatusUpdateModal.value = true\r\n}\r\n\r\nconst confirmStatusUpdate = async () => {\r\n  if (!newStatus.value || newStatus.value === orderToUpdate.value.status) {\r\n    showStatusUpdateModal.value = false\r\n    return\r\n  }\r\n\r\n  updating.value = true\r\n  try {\r\n    if (!authStore.token) {\r\n      throw new Error('No authentication token')\r\n    }\r\n\r\n    // Make API call to update order status using $fetch\r\n    const response = await $fetch(`/api/admin/orders/${orderToUpdate.value.id}`, {\r\n      method: 'PATCH',\r\n      headers: {\r\n        'Authorization': `Bearer ${authStore.token}`,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: {\r\n        status: newStatus.value.toUpperCase()\r\n      }\r\n    })\r\n\r\n    if (response.success) {\r\n      // Update the local order status\r\n      orderToUpdate.value.status = newStatus.value.toLowerCase()\r\n      alert(`Order #${orderToUpdate.value.id} status updated to ${newStatus.value}`)\r\n      showStatusUpdateModal.value = false\r\n    } else {\r\n      throw new Error('Failed to update order status')\r\n    }\r\n  } catch (error) {\r\n    console.error('Error updating order status:', error)\r\n    alert('Failed to update order status. Please try again.')\r\n  } finally {\r\n    updating.value = false\r\n  }\r\n}\r\n\r\n// Load orders on mount\r\nonMounted(() => {\r\n  loadOrders()\r\n})\r\n</script>\r\n"],"version":3}