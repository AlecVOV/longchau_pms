{"file":"cart-Cj2Ys50X.js","mappings":";;;;;;;;;;;;;;AAEa,MAAA,eAAe,YAAY,QAAQ;AAAA,EAC9C,OAAO,OAAO;AAAA,IACZ,OAAO,CAAA;AAAA,EAAC;AAAA,EAGV,SAAS;AAAA,IACP,WAAW,CAAC,UAAU;AACb,aAAA,MAAM,MAAM,OAAO,CAAC,OAAO,SAAS,QAAQ,KAAK,UAAU,CAAC;AAAA,IACrE;AAAA,IAEA,OAAO,CAAC,UAAU;AACT,aAAA,MAAM,MAAM,OAAO,CAAC,KAAK,SAAS,MAAO,KAAK,QAAQ,KAAK,UAAW,CAAC;AAAA,IAAA;AAAA,EAElF;AAAA,EAEA,SAAS;AAAA,IACP,QAAQ,SAAS,WAAW,GAAG;AACvB,YAAA,eAAe,KAAK,MAAM,KAAK,UAAQ,KAAK,OAAO,QAAQ,EAAE;AAEnE,UAAI,cAAc;AAChB,qBAAa,YAAY;AAAA,MAAA,OACpB;AACL,aAAK,MAAM,KAAK;AAAA,UACd,IAAI,QAAQ;AAAA,UACZ,MAAM,QAAQ;AAAA,UACd,OAAO,QAAQ;AAAA,UACf,OAAO,QAAQ;AAAA,UACf;AAAA,UACA,MAAM,QAAQ,QAAQ;AAAA,QAAA,CACvB;AAAA,MAAA;AAGH,WAAK,mBAAmB;AAAA,IAC1B;AAAA,IAEA,WAAW,WAAW;AACpB,WAAK,QAAQ,KAAK,MAAM,OAAO,CAAQ,SAAA,KAAK,OAAO,SAAS;AAC5D,WAAK,mBAAmB;AAAA,IAC1B;AAAA,IAEA,eAAe,WAAW,UAAU;AAC5B,YAAA,OAAO,KAAK,MAAM,KAAK,CAAAA,UAAQA,MAAK,OAAO,SAAS;AAC1D,UAAI,MAAM;AACR,YAAI,YAAY,GAAG;AACjB,eAAK,WAAW,SAAS;AAAA,QAAA,OACpB;AACL,eAAK,WAAW;AAChB,eAAK,mBAAmB;AAAA,QAAA;AAAA,MAC1B;AAAA,IAEJ;AAAA,IAEA,YAAY;AACV,WAAK,QAAQ,CAAC;AACd,WAAK,mBAAmB;AAAA,IAC1B;AAAA;AAAA,IAGA,iBAAiB;AACX,UAAA;AAEF,aAAK,QAAQ,CAAC;AAGd,cAAM,eAAe;AAAA,UACnB;AAAA,UACA;AAAA,UACA,KAAK,WAAW;AAAA,QAClB;AAEA,qBAAa,QAAQ,CAAO,QAAA;AACtB,cAAA;AACF,yBAAa,WAAW,GAAG;AAAA,mBACpB,GAAG;AACV,oBAAQ,KAAK,oBAAoB,GAAG,uBAAuB,CAAC;AAAA,UAAA;AAAA,QAC9D,CACD;AAGG,YAAA;AACI,gBAAA,SAAS,KAAK,iBAAiB;AACjC,cAAA,UAAU,WAAW,SAAS;AACnB,yBAAA,WAAW,iBAAiB,MAAM,EAAE;AAAA,UAAA;AAAA,iBAE5C,GAAG;AACF,kBAAA,KAAK,uCAAuC,CAAC;AAAA,QAAA;AAGvD,gBAAQ,IAAI,oDAAoD;AACzD,eAAA;AAAA,eACA,OAAO;AACN,gBAAA,MAAM,4BAA4B,KAAK;AACxC,eAAA;AAAA,MAAA;AAAA,IAEX;AAAA;AAAA,IAGA,mBAAmB;AACW,aAAA;AAAA,IAsB9B;AAAA;AAAA,IAGA,aAAa;AACL,YAAA,SAAS,KAAK,iBAAiB;AACrC,aAAO,iBAAiB,MAAM;AAAA,IAChC;AAAA;AAAA,IAGA,qBAAqB;AACE;AAAA,IAQvB;AAAA;AAAA,IAGA,uBAAuB;AACA;AAAA,IAavB;AAAA;AAAA,IAGA,OAAO;AACL,WAAK,qBAAqB;AAAA,IAAA;AAAA,EAC5B;AAEJ,CAAC;","names":["item"],"sources":["../../../../stores/cart.js"],"sourcesContent":["import { defineStore } from 'pinia'\r\n\r\nexport const useCartStore = defineStore('cart', {\r\n  state: () => ({\r\n    items: []\r\n  }),\r\n  \r\n  getters: {\r\n    itemCount: (state) => {\r\n      return state.items.reduce((total, item) => total + item.quantity, 0)\r\n    },\r\n    \r\n    total: (state) => {\r\n      return state.items.reduce((sum, item) => sum + (item.price * item.quantity), 0)\r\n    },\r\n  },\r\n  \r\n  actions: {\r\n    addItem(product, quantity = 1) {\r\n      const existingItem = this.items.find(item => item.id === product.id)\r\n      \r\n      if (existingItem) {\r\n        existingItem.quantity += quantity\r\n      } else {\r\n        this.items.push({\r\n          id: product.id,\r\n          name: product.name,\r\n          price: product.price,\r\n          image: product.image,\r\n          quantity: quantity,\r\n          isRx: product.isRx || false\r\n        })\r\n      }\r\n      \r\n      this.saveToLocalStorage()\r\n    },\r\n    \r\n    removeItem(productId) {\r\n      this.items = this.items.filter(item => item.id !== productId)\r\n      this.saveToLocalStorage()\r\n    },\r\n    \r\n    updateQuantity(productId, quantity) {\r\n      const item = this.items.find(item => item.id === productId)\r\n      if (item) {\r\n        if (quantity <= 0) {\r\n          this.removeItem(productId)\r\n        } else {\r\n          item.quantity = quantity\r\n          this.saveToLocalStorage()\r\n        }\r\n      }\r\n    },\r\n    \r\n    clearCart() {\r\n      this.items = []\r\n      this.saveToLocalStorage()\r\n    },\r\n\r\n    // Enhanced cart clearing method with better error handling\r\n    forceCloseCart() {\r\n      try {\r\n        // Clear the items array\r\n        this.items = []\r\n        \r\n        // Clear localStorage with different possible keys\r\n        const possibleKeys = [\r\n          'pharmacy-cart',\r\n          'pharmacy-cart-guest',\r\n          this.getCartKey()\r\n        ]\r\n        \r\n        possibleKeys.forEach(key => {\r\n          try {\r\n            localStorage.removeItem(key)\r\n          } catch (e) {\r\n            console.warn(`Failed to remove ${key} from localStorage:`, e)\r\n          }\r\n        })\r\n        \r\n        // Try to clear any user-specific cart keys\r\n        try {\r\n          const userId = this.getCurrentUserId()\r\n          if (userId && userId !== 'guest') {\r\n            localStorage.removeItem(`pharmacy-cart-${userId}`)\r\n          }\r\n        } catch (e) {\r\n          console.warn('Failed to clear user-specific cart:', e)\r\n        }\r\n        \r\n        console.log('Cart successfully cleared and localStorage cleaned')\r\n        return true\r\n      } catch (error) {\r\n        console.error('Error in forceCloseCart:', error)\r\n        return false\r\n      }\r\n    },\r\n    \r\n    // Get current user ID from auth store safely - FIXED VERSION\r\n    getCurrentUserId() {\r\n      if (!process.client) return 'guest'\r\n      \r\n      try {\r\n        // Safe approach: try to access auth store through Nuxt context\r\n        // without using require() or dynamic imports\r\n        const nuxtApp = useNuxtApp()\r\n        if (nuxtApp && nuxtApp.$pinia) {\r\n          // Check if auth store exists and is initialized\r\n          const stores = nuxtApp.$pinia._s\r\n          if (stores && stores.has('auth')) {\r\n            const authStore = stores.get('auth')\r\n            if (authStore && authStore.user && authStore.user.id) {\r\n              return authStore.user.id\r\n            }\r\n          }\r\n        }\r\n        \r\n        return 'guest'\r\n      } catch (error) {\r\n        // Silently fail and return guest - don't log to avoid console spam\r\n        return 'guest'\r\n      }\r\n    },\r\n\r\n    // Get user-specific cart key\r\n    getCartKey() {\r\n      const userId = this.getCurrentUserId()\r\n      return `pharmacy-cart-${userId}`\r\n    },\r\n    \r\n    // Save cart to localStorage\r\n    saveToLocalStorage() {\r\n      if (!process.client) return\r\n      \r\n      try {\r\n        const cartKey = this.getCartKey()\r\n        localStorage.setItem(cartKey, JSON.stringify(this.items))\r\n      } catch (error) {\r\n        console.warn('Failed to save cart to localStorage:', error)\r\n      }\r\n    },\r\n    \r\n    // Load cart from localStorage\r\n    loadFromLocalStorage() {\r\n      if (!process.client) return\r\n      \r\n      try {\r\n        const cartKey = this.getCartKey()\r\n        const stored = localStorage.getItem(cartKey)\r\n        \r\n        if (stored) {\r\n          this.items = JSON.parse(stored)\r\n        }\r\n      } catch (error) {\r\n        console.warn('Failed to load cart from localStorage:', error)\r\n        this.items = []\r\n      }\r\n    },\r\n    \r\n    // Initialize cart (called when store is created)\r\n    init() {\r\n      this.loadFromLocalStorage()\r\n    }\r\n  }\r\n})"],"version":3}