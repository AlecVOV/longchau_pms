{"file":"checkout-B-wfKYCR.js","mappings":"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","names":["option"],"sources":["../../../../pages/checkout.vue"],"sourcesContent":["<template>\n  <div class=\"py-8 md:py-12\">\n    <div class=\"container-custom\">\n      <h1 class=\"text-2xl md:text-3xl font-bold text-neutral-900 mb-6\">Checkout</h1>\n      \n      <!-- Empty Cart Message -->\n      <div v-if=\"cartItems.length === 0\" class=\"bg-white rounded-lg shadow-sm p-8 text-center\">\n        <div class=\"w-20 h-20 mx-auto mb-4 rounded-full bg-neutral-100 flex items-center justify-center\">\n          <span class=\"i-iconify-ph-shopping-cart-fill text-3xl text-neutral-400\"></span>\n        </div>\n        <h2 class=\"text-xl font-semibold text-neutral-800 mb-3\">Your cart is empty</h2>\n        <p class=\"text-neutral-600 mb-6\">You need to add items to your cart before proceeding to checkout.</p>\n        <NuxtLink to=\"/\" class=\"btn-primary\">Browse Products</NuxtLink>\n      </div>\n      \n      <!-- Checkout Process -->\n      <div v-else class=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n        <!-- Checkout Steps -->\n        <div class=\"lg:col-span-2 space-y-6\">\n          <!-- Checkout Progress -->\n          <div class=\"bg-white rounded-lg shadow-sm p-6\">\n            <div class=\"flex items-center justify-between\">\n              <div \n                v-for=\"(step, index) in checkoutSteps\" \n                :key=\"step.id\" \n                class=\"flex-1 flex flex-col items-center\"\n              >\n                <div \n                  class=\"w-8 h-8 rounded-full flex items-center justify-center mb-2 relative text-sm\"\n                  :class=\"[\n                    activeStep === index ? 'bg-primary-600 text-white' : \n                    activeStep > index ? 'bg-primary-500 text-white' : 'bg-neutral-200 text-neutral-600'\n                  ]\"\n                >\n                  <span v-if=\"activeStep <= index\">{{ index + 1 }}</span>\n                  <span v-else class=\"i-iconify-ph-check-bold\"></span>\n                  \n                  <!-- Progress line -->\n                  <div \n                    v-if=\"index < checkoutSteps.length - 1\" \n                    class=\"absolute top-1/2 transform -translate-y-1/2 w-full h-0.5 left-1/2\"\n                    :class=\"[\n                      activeStep > index ? 'bg-primary-500' : 'bg-neutral-200'\n                    ]\"\n                  ></div>\n                </div>\n                <span \n                  class=\"text-sm font-medium hidden md:block\"\n                  :class=\"[\n                    activeStep === index ? 'text-primary-600' : \n                    activeStep > index ? 'text-primary-500' : 'text-neutral-500'\n                  ]\"\n                >\n                  {{ step.name }}\n                </span>\n              </div>\n            </div>\n          </div>\n          \n          <!-- Shipping Information (Step 1) -->\n          <div v-if=\"activeStep === 0\" class=\"bg-white rounded-lg shadow-sm p-6 animate-fade-in\">\n            <h2 class=\"text-xl font-semibold mb-6 flex items-center\">\n              <span class=\"i-iconify-ph-truck-fill text-xl text-primary-600 mr-2\"></span>\n              Shipping Information\n            </h2>\n            \n            <div class=\"space-y-4\">\n              <!-- Contact Information -->\n              <div>\n                <h3 class=\"font-medium text-neutral-800 mb-3\">Contact Information</h3>\n                <div class=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <label for=\"email\" class=\"block text-sm font-medium text-neutral-700 mb-1\">Email Address <span class=\"text-accent-500\">*</span></label>\n                    <input \n                      type=\"email\" \n                      id=\"email\" \n                      v-model=\"formData.email\" \n                      class=\"input\" \n                      :class=\"{'border-accent-500 focus:ring-accent-500': errors.email}\"\n                      required\n                    >\n                    <p v-if=\"errors.email\" class=\"text-accent-600 text-xs mt-1\">{{ errors.email }}</p>\n                  </div>\n                  <div>\n                    <label for=\"phone\" class=\"block text-sm font-medium text-neutral-700 mb-1\">Phone Number <span class=\"text-accent-500\">*</span></label>\n                    <input \n                      type=\"tel\" \n                      id=\"phone\" \n                      v-model=\"formData.phone\" \n                      class=\"input\" \n                      :class=\"{'border-accent-500 focus:ring-accent-500': errors.phone}\"\n                      required\n                    >\n                    <p v-if=\"errors.phone\" class=\"text-accent-600 text-xs mt-1\">{{ errors.phone }}</p>\n                  </div>\n                </div>\n              </div>\n              \n              <!-- Shipping Address -->\n              <div class=\"mt-6\">\n                <h3 class=\"font-medium text-neutral-800 mb-3\">Shipping Address</h3>\n                <div class=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <label for=\"firstName\" class=\"block text-sm font-medium text-neutral-700 mb-1\">First Name <span class=\"text-accent-500\">*</span></label>\n                    <input \n                      type=\"text\" \n                      id=\"firstName\" \n                      v-model=\"formData.firstName\" \n                      class=\"input\" \n                      :class=\"{'border-accent-500 focus:ring-accent-500': errors.firstName}\"\n                      required\n                    >\n                    <p v-if=\"errors.firstName\" class=\"text-accent-600 text-xs mt-1\">{{ errors.firstName }}</p>\n                  </div>\n                  <div>\n                    <label for=\"lastName\" class=\"block text-sm font-medium text-neutral-700 mb-1\">Last Name <span class=\"text-accent-500\">*</span></label>\n                    <input \n                      type=\"text\" \n                      id=\"lastName\" \n                      v-model=\"formData.lastName\" \n                      class=\"input\" \n                      :class=\"{'border-accent-500 focus:ring-accent-500': errors.lastName}\"\n                      required\n                    >\n                    <p v-if=\"errors.lastName\" class=\"text-accent-600 text-xs mt-1\">{{ errors.lastName }}</p>\n                  </div>\n                  <div class=\"md:col-span-2\">\n                    <label for=\"address\" class=\"block text-sm font-medium text-neutral-700 mb-1\">Address <span class=\"text-accent-500\">*</span></label>\n                    <input \n                      type=\"text\" \n                      id=\"address\" \n                      v-model=\"formData.address\" \n                      class=\"input\" \n                      :class=\"{'border-accent-500 focus:ring-accent-500': errors.address}\"\n                      required\n                    >\n                    <p v-if=\"errors.address\" class=\"text-accent-600 text-xs mt-1\">{{ errors.address }}</p>\n                  </div>\n                  <div>\n                    <label for=\"zipCode\" class=\"block text-sm font-medium text-neutral-700 mb-1\">Postal Code <span class=\"text-accent-500\">*</span></label>\n                    <input \n                      type=\"text\" \n                      id=\"zipCode\" \n                      v-model=\"formData.zipCode\" \n                      class=\"input\" \n                      :class=\"{'border-accent-500 focus:ring-accent-500': errors.zipCode}\"\n                      required\n                    >\n                    <p v-if=\"errors.zipCode\" class=\"text-accent-600 text-xs mt-1\">{{ errors.zipCode }}</p>\n                  </div>\n                  <div>\n                    <label for=\"country\" class=\"block text-sm font-medium text-neutral-700 mb-1\">Country <span class=\"text-accent-500\">*</span></label>\n                    <select \n                      id=\"country\" \n                      v-model=\"formData.country\" \n                      class=\"input\" \n                      :class=\"{'border-accent-500 focus:ring-accent-500': errors.country}\"\n                      required\n                    >\n                      <option value=\"VN\">Vietnam</option>\n                    </select>\n                    <p v-if=\"errors.country\" class=\"text-accent-600 text-xs mt-1\">{{ errors.country }}</p>\n                  </div>\n                </div>\n              </div>\n              \n              <!-- Shipping Options -->\n              <div class=\"mt-6\">\n                <h3 class=\"font-medium text-neutral-800 mb-3\">Shipping Method</h3>\n                <div class=\"space-y-3\">\n                  <div \n                    v-for=\"(option, index) in shippingOptions\" \n                    :key=\"option.id\" \n                    class=\"border rounded-lg p-4 flex items-center cursor-pointer transition-colors\"\n                    :class=\"formData.shippingMethod === option.id ? 'border-primary-500 bg-primary-50' : 'border-neutral-200 hover:border-primary-300'\"\n                    @click=\"formData.shippingMethod = option.id\"\n                  >\n                    <div class=\"w-5 h-5 rounded-full border-2 flex items-center justify-center mr-3\"\n                         :class=\"formData.shippingMethod === option.id ? 'border-primary-600' : 'border-neutral-300'\">\n                      <div v-if=\"formData.shippingMethod === option.id\" class=\"w-3 h-3 rounded-full bg-primary-600\"></div>\n                    </div>\n                    <div class=\"flex-grow\">\n                      <p class=\"font-medium text-neutral-800\">{{ option.name }}</p>\n                      <p class=\"text-sm text-neutral-500\">{{ option.description }}</p>\n                    </div>\n                    <div class=\"text-right\">\n                      <p class=\"font-semibold text-neutral-800\">\n                        {{ option.price === 0 ? 'Free' : '$' + option.price.toFixed(2) }}\n                      </p>\n                      <p class=\"text-xs text-neutral-500\">{{ option.eta }}</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              <!-- Special Instructions -->\n              <div class=\"mt-6\">\n                <label for=\"instructions\" class=\"block text-sm font-medium text-neutral-700 mb-1\">Special Instructions (Optional)</label>\n                <textarea \n                  id=\"instructions\" \n                  v-model=\"formData.specialInstructions\" \n                  class=\"input h-20\" \n                  placeholder=\"Any special delivery instructions or notes\"\n                ></textarea>\n              </div>\n              \n              <!-- Prescription Upload Notice -->\n              <div v-if=\"hasPrescriptionItems\" class=\"mt-6 bg-primary-50 border border-primary-100 rounded-md p-4\">\n                <div class=\"flex\">\n                  <span class=\"i-iconify-ph-prescription-fill text-xl text-primary-600 mr-2 mt-0.5\"></span>\n                  <div>\n                    <h3 class=\"font-medium text-primary-700 mb-1\">Prescription Required</h3>\n                    <p class=\"text-sm text-primary-600 mb-3\">\n                      One or more items in your order require a prescription. \n                      Please upload a valid prescription below.\n                    </p>\n                    <div class=\"flex items-center\">\n                      <label for=\"prescription\" class=\"btn-outline text-sm py-1.5 cursor-pointer\">\n                        <span class=\"i-iconify-ph-upload-simple text-lg mr-1\"></span>\n                        Upload Prescription\n                        <input \n                          type=\"file\" \n                          id=\"prescription\" \n                          class=\"hidden\" \n                          accept=\".jpg,.jpeg,.png,.pdf\"\n                          @change=\"handlePrescriptionUpload\"\n                        >\n                      </label>\n                      <span v-if=\"formData.prescriptionFile\" class=\"ml-3 text-sm text-primary-600\">\n                        {{ formData.prescriptionFile.name }}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            <div class=\"flex justify-between mt-8\">\n              <NuxtLink to=\"/cart\" class=\"btn-outline\">Return to Cart</NuxtLink>\n              <button @click=\"goToStep(1)\" class=\"btn-primary\" :disabled=\"!canProceedToNextStep\">Continue to Payment</button>\n            </div>\n          </div>\n          \n          <!-- Payment (Step 2) -->\n          <div v-if=\"activeStep === 1\" class=\"bg-white rounded-lg shadow-sm p-6 animate-fade-in\">\n            <h2 class=\"text-xl font-semibold mb-6 flex items-center\">\n              <span class=\"i-iconify-ph-credit-card-fill text-xl text-primary-600 mr-2\"></span>\n              Payment Method\n            </h2>\n            \n            <div class=\"space-y-4\">\n              <!-- Billing Address -->\n              <div>\n                <div class=\"flex items-center mb-4\">\n                  <h3 class=\"font-medium text-neutral-800\">Billing Address</h3>\n                  <div class=\"ml-6 flex items-center\">\n                    <input \n                      type=\"checkbox\" \n                      id=\"sameAsShipping\" \n                      v-model=\"sameAsShipping\" \n                      class=\"rounded text-primary-600 focus:ring-primary-500 h-4 w-4\"\n                    >\n                    <label for=\"sameAsShipping\" class=\"ml-2 text-sm text-neutral-700\">\n                      Same as shipping address\n                    </label>\n                  </div>\n                </div>\n                \n                <div v-if=\"!sameAsShipping\" class=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <label for=\"billingFirstName\" class=\"block text-sm font-medium text-neutral-700 mb-1\">First Name <span class=\"text-accent-500\">*</span></label>\n                    <input \n                      type=\"text\" \n                      id=\"billingFirstName\" \n                      v-model=\"billingAddress.firstName\" \n                      class=\"input\" \n                      :class=\"{'border-accent-500 focus:ring-accent-500': errors.billingFirstName}\"\n                      required\n                    >\n                    <p v-if=\"errors.billingFirstName\" class=\"text-accent-600 text-xs mt-1\">{{ errors.billingFirstName }}</p>\n                  </div>\n                  <div>\n                    <label for=\"billingLastName\" class=\"block text-sm font-medium text-neutral-700 mb-1\">Last Name <span class=\"text-accent-500\">*</span></label>\n                    <input \n                      type=\"text\" \n                      id=\"billingLastName\" \n                      v-model=\"billingAddress.lastName\" \n                      class=\"input\" \n                      :class=\"{'border-accent-500 focus:ring-accent-500': errors.billingLastName}\"\n                      required\n                    >\n                    <p v-if=\"errors.billingLastName\" class=\"text-accent-600 text-xs mt-1\">{{ errors.billingLastName }}</p>\n                  </div>\n                  <div class=\"md:col-span-2\">\n                    <label for=\"billingAddress\" class=\"block text-sm font-medium text-neutral-700 mb-1\">Street Address <span class=\"text-accent-500\">*</span></label>\n                    <input \n                      type=\"text\" \n                      id=\"billingAddress\" \n                      v-model=\"billingAddress.address\" \n                      class=\"input\" \n                      :class=\"{'border-accent-500 focus:ring-accent-500': errors.billingAddress}\"\n                      required\n                    >\n                    <p v-if=\"errors.billingAddress\" class=\"text-accent-600 text-xs mt-1\">{{ errors.billingAddress }}</p>\n                  </div>\n                  <div>\n                    <label for=\"billingZipCode\" class=\"block text-sm font-medium text-neutral-700 mb-1\">Postal Code <span class=\"text-accent-500\">*</span></label>\n                    <input \n                      type=\"text\" \n                      id=\"billingZipCode\" \n                      v-model=\"billingAddress.zipCode\" \n                      class=\"input\" \n                      :class=\"{'border-accent-500 focus:ring-accent-500': errors.billingZipCode}\"\n                      required\n                    >\n                    <p v-if=\"errors.billingZipCode\" class=\"text-accent-600 text-xs mt-1\">{{ errors.billingZipCode }}</p>\n                  </div>\n                  <div>\n                    <label for=\"billingCountry\" class=\"block text-sm font-medium text-neutral-700 mb-1\">Country <span class=\"text-accent-500\">*</span></label>\n                    <select \n                      id=\"billingCountry\" \n                      v-model=\"billingAddress.country\" \n                      class=\"input\" \n                      :class=\"{'border-accent-500 focus:ring-accent-500': errors.billingCountry}\"\n                      required\n                    >\n                      <option value=\"VN\">Vietnam</option>\n                    </select>\n                    <p v-if=\"errors.billingCountry\" class=\"text-accent-600 text-xs mt-1\">{{ errors.billingCountry }}</p>\n                  </div>\n                </div>\n              </div>\n              \n              <!-- Enhanced Payment Form -->\n              <PaymentForm\n                ref=\"paymentFormRef\"\n                v-model=\"paymentData\"\n                :disabled=\"isProcessingPayment\"\n                @validation-change=\"handlePaymentValidation\"\n              />\n              \n              <!-- Payment Terms -->\n              <div class=\"mt-6 p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n                <div class=\"flex items-start\">\n                  <svg class=\"w-5 h-5 text-blue-600 mt-0.5 mr-2 flex-shrink-0\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path fill-rule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\" clip-rule=\"evenodd\" />\n                  </svg>\n                  <div>\n                    <h4 class=\"text-sm font-medium text-blue-800 mb-1\">Payment Information</h4>\n                    <div class=\"text-sm text-blue-700 space-y-1\">\n                      <p>• Your payment will be processed securely using 256-bit SSL encryption</p>\n                      <p>• No payment will be charged until your order is confirmed</p>\n                      <p>• You can review your order before completing the purchase</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              <!-- PayPal Information (if PayPal selected) -->\n              <div v-if=\"paymentMethod === 'paypal'\" class=\"mt-6 p-4 border border-neutral-200 rounded-lg\">\n                <div class=\"text-center\">\n                  <p class=\"mb-4 text-neutral-700\">You will be redirected to PayPal to complete your payment securely.</p>\n                  <img src=\"https://placehold.co/200x60?text=PayPal\" alt=\"PayPal\" class=\"h-8 mx-auto\">\n                </div>\n              </div>\n            </div>\n            \n            <div class=\"flex justify-between mt-8\">\n              <button @click=\"goToStep(0)\" class=\"btn-outline\">Back to Shipping</button>\n              <button @click=\"goToStep(2)\" class=\"btn-primary\" :disabled=\"!paymentValid\">Continue to Review</button>\n            </div>\n          </div>\n          \n          <!-- Review Order (Step 3) -->\n          <div v-if=\"activeStep === 2\" class=\"bg-white rounded-lg shadow-sm p-6 animate-fade-in\">\n            <h2 class=\"text-xl font-semibold mb-6 flex items-center\">\n              <span class=\"i-iconify-ph-clipboard-text-fill text-xl text-primary-600 mr-2\"></span>\n              Review Your Order\n            </h2>\n            \n            <div class=\"space-y-6\">\n              <!-- Order Items -->\n              <div>\n                <h3 class=\"font-medium text-neutral-800 mb-3\">Order Items ({{ cartItemCount }})</h3>\n                <div class=\"space-y-4 max-h-60 overflow-y-auto pr-2\">\n                  <div v-for=\"(item, index) in cartItems\" :key=\"index\" class=\"flex items-center gap-3 py-2 border-b border-neutral-100 last:border-b-0\">\n                    <img :src=\"item.image\" :alt=\"item.name\" class=\"w-14 h-14 object-cover rounded-md\">\n                    <div class=\"flex-grow\">\n                      <p class=\"font-medium text-neutral-800\">{{ item.name }}</p>\n                      <div class=\"flex justify-between mt-1\">\n                        <p class=\"text-sm text-neutral-500\">Qty: {{ item.quantity }}</p>\n                        <p class=\"font-medium text-neutral-800\">${{ (item.price * item.quantity).toFixed(2) }}</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              <!-- Shipping Info Summary -->\n              <div class=\"border-t border-neutral-200 pt-4\">\n                <div class=\"flex justify-between items-center mb-2\">\n                  <h3 class=\"font-medium text-neutral-800\">Shipping Information</h3>\n                  <button @click=\"goToStep(0)\" class=\"text-sm text-primary-600 hover:text-primary-700\">\n                    Edit\n                  </button>\n                </div>\n                <div class=\"bg-neutral-50 rounded-lg p-3 text-sm\">\n                  <p class=\"font-medium text-neutral-800\">{{ formData.firstName }} {{ formData.lastName }}</p>\n                  <p>{{ formData.address }}</p>\n                  <p>{{ formData.zipCode }}</p>\n                  <p>{{ getCountryName(formData.country) }}</p>\n                  <p class=\"mt-1\">{{ formData.email }}</p>\n                  <p>{{ formData.phone }}</p>\n                  <p v-if=\"formData.specialInstructions\" class=\"mt-2 text-neutral-600 italic\">\n                    <span class=\"font-medium\">Special Instructions:</span> {{ formData.specialInstructions }}\n                  </p>\n                  <p class=\"mt-2 text-neutral-600\">\n                    <span class=\"font-medium\">Shipping Method:</span> {{ getShippingMethodName() }}\n                  </p>\n                </div>\n              </div>\n              \n              <!-- Payment Info Summary -->\n              <div class=\"border-t border-neutral-200 pt-4\">\n                <div class=\"flex justify-between items-center mb-2\">\n                  <h3 class=\"font-medium text-neutral-800\">Payment Information</h3>\n                  <button @click=\"goToStep(1)\" class=\"text-sm text-primary-600 hover:text-primary-700\">\n                    Edit\n                  </button>\n                </div>\n                <div class=\"bg-neutral-50 rounded-lg p-3 text-sm\">\n                  <div v-if=\"paymentMethod === 'credit-card'\">\n                    <div class=\"flex items-center\">\n                      <span v-if=\"cardType\" :class=\"`i-iconify-${cardType} text-xl mr-2`\"></span>\n                      <span v-else class=\"i-iconify-ph-credit-card-fill text-xl mr-2 text-neutral-400\"></span>\n                      <div>\n                        <p class=\"font-medium\">Credit Card</p>\n                        <p>**** **** **** {{ paymentDetails.cardNumber.slice(-4) }}</p>\n                      </div>\n                    </div>\n                  </div>\n                  <div v-else-if=\"paymentMethod === 'paypal'\">\n                    <div class=\"flex items-center\">\n                      <span class=\"i-iconify-ph-paypal-logo-fill text-xl mr-2 text-[#003087]\"></span>\n                      <p class=\"font-medium\">PayPal</p>\n                    </div>\n                  </div>\n                  \n                  <div class=\"mt-2\" v-if=\"!sameAsShipping\">\n                    <p class=\"font-medium mt-3\">Billing Address:</p>\n                    <p>{{ billingAddress.firstName }} {{ billingAddress.lastName }}</p>\n                    <p>{{ billingAddress.address }}</p>\n                    <p>{{ billingAddress.zipCode }}</p>\n                    <p>{{ getCountryName(billingAddress.country) }}</p>\n                  </div>\n                  <div class=\"mt-2\" v-else>\n                    <p class=\"text-neutral-600\"><span class=\"font-medium\">Billing Address:</span> Same as shipping</p>\n                  </div>\n                </div>\n              </div>\n              \n              <!-- Prescription Information (if applicable) -->\n              <div v-if=\"hasPrescriptionItems\" class=\"border-t border-neutral-200 pt-4\">\n                <h3 class=\"font-medium text-neutral-800 mb-2\">Prescription Information</h3>\n                <div class=\"bg-neutral-50 rounded-lg p-3 text-sm\">\n                  <div v-if=\"formData.prescriptionFile\">\n                    <div class=\"flex items-center\">\n                      <span class=\"i-iconify-ph-check-circle-fill text-lg text-success-500 mr-2\"></span>\n                      <p>Prescription uploaded: <span class=\"font-medium\">{{ formData.prescriptionFile.name }}</span></p>\n                    </div>\n                  </div>\n                  <div v-else class=\"text-accent-600\">\n                    <span class=\"i-iconify-ph-warning-circle-fill text-lg mr-2 align-text-bottom\"></span>\n                    <span>Prescription not uploaded. Please go back to the shipping step to upload your prescription.</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            <div class=\"flex justify-between mt-8\">\n              <button @click=\"goToStep(1)\" class=\"btn-outline\">Back to Payment</button>\n              <button \n                @click=\"placeOrder\" \n                class=\"btn-primary\" \n                :disabled=\"!canPlaceOrder\"\n              >\n                Place Order\n              </button>\n            </div>\n          </div>\n          \n          <!-- Order Confirmation (Step 4) -->\n          <div v-if=\"activeStep === 3\" class=\"bg-white rounded-lg shadow-sm p-6 text-center animate-fade-in\">\n            <div class=\"w-20 h-20 mx-auto mb-4 rounded-full bg-success-100 flex items-center justify-center\">\n              <span class=\"i-iconify-ph-check-fill text-4xl text-success-500\"></span>\n            </div>\n            <h2 class=\"text-2xl font-bold text-neutral-900 mb-3\">Thank You for Your Order!</h2>\n            <p class=\"text-neutral-600 mb-6\">Your order has been placed successfully.</p>\n            \n            <div class=\"max-w-md mx-auto bg-neutral-50 rounded-lg p-4 text-left mb-8\">\n              <p class=\"font-semibold text-neutral-800 mb-2\">Order #{{ orderNumber }}</p>\n              <p class=\"text-sm text-neutral-600 mb-4\">A confirmation email has been sent to {{ formData.email }}</p>\n              \n              <div class=\"border-t border-neutral-200 pt-3 mt-3\">\n                <p class=\"font-medium text-neutral-800 mb-1\">Order Summary</p>\n                <div class=\"flex justify-between text-sm text-neutral-600 mb-1\">\n                  <span>Subtotal ({{ cartItemCount }} items):</span>\n                  <span>${{ cartTotal.toFixed(2) }}</span>\n                </div>\n                <div class=\"flex justify-between text-sm text-neutral-600 mb-1\">\n                  <span>Shipping:</span>\n                  <span v-if=\"selectedShippingOption.price === 0\">Free</span>\n                  <span v-else>${{ selectedShippingOption.price.toFixed(2) }}</span>\n                </div>\n                <div class=\"flex justify-between text-sm text-neutral-600 mb-1\">\n                  <span>Tax:</span>\n                  <span>${{ tax.toFixed(2) }}</span>\n                </div>\n                <div class=\"flex justify-between font-semibold text-neutral-800 mt-2 text-base\">\n                  <span>Total:</span>\n                  <span>${{ orderTotal.toFixed(2) }}</span>\n                </div>\n              </div>\n            </div>\n            \n            <div class=\"space-x-4\">\n              <NuxtLink to=\"/account/orders\" class=\"btn-primary\">\n                View Your Orders\n              </NuxtLink>\n              <NuxtLink to=\"/\" class=\"btn-outline\">\n                Continue Shopping\n              </NuxtLink>\n            </div>\n            \n            <!-- Manual Cart Clear Button (if cart still has items) -->\n            <div v-if=\"cartItems.length > 0\" class=\"mt-6 p-4 bg-amber-50 border border-amber-200 rounded-lg\">\n              <div class=\"text-center\">\n                <p class=\"text-sm text-amber-700 mb-3\">\n                  <span class=\"i-iconify-ph-warning-fill text-lg mr-1\"></span>\n                  Your cart still contains items. This might be a technical issue.\n                </p>\n                <button \n                  @click=\"forceClearCart\" \n                  class=\"btn-outline text-sm\"\n                >\n                  Clear Cart Manually\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <!-- Order Summary -->\n        <div class=\"lg:col-span-1\">\n          <div class=\"bg-white rounded-lg shadow-sm overflow-hidden lg:sticky lg:top-8 lg:max-h-[calc(100vh-6rem)]\">\n            <div class=\"p-4 sm:p-6 border-b border-neutral-200\">\n              <h2 class=\"text-lg font-semibold text-neutral-800\">Order Summary</h2>\n            </div>\n            \n            <div class=\"p-4 sm:p-6 lg:overflow-y-auto lg:max-h-[calc(100vh-12rem)]\">\n              <div v-if=\"cartItems.length > 0\" class=\"max-h-60 lg:max-h-none overflow-y-auto mb-4\">\n                <div v-for=\"(item, index) in cartItems\" :key=\"index\" class=\"flex items-center py-2 border-b border-neutral-100 last:border-b-0\">\n                  <img :src=\"item.image\" :alt=\"item.name\" class=\"w-12 h-12 object-cover rounded-md\">\n                  <div class=\"ml-3 flex-1\">\n                    <p class=\"text-sm font-medium text-neutral-800 line-clamp-1\">{{ item.name }}</p>\n                    <div class=\"flex items-center justify-between mt-1\">\n                      <p class=\"text-sm text-neutral-500\">{{ item.quantity }} × ${{ item.price.toFixed(2) }}</p>\n                      <p class=\"text-sm font-medium\">${{ (item.price * item.quantity).toFixed(2) }}</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              <div class=\"space-y-3 mb-6\">\n                <div class=\"flex justify-between\">\n                  <span class=\"text-neutral-600\">Subtotal</span>\n                  <span class=\"font-medium text-neutral-800\">${{ cartTotal.toFixed(2) }}</span>\n                </div>\n                <div class=\"flex justify-between\">\n                  <span class=\"text-neutral-600\">Shipping</span>\n                  <span v-if=\"selectedShippingOption.price === 0\" class=\"text-success-500 font-medium\">Free</span>\n                  <span v-else class=\"font-medium text-neutral-800\">${{ selectedShippingOption.price.toFixed(2) }}</span>\n                </div>\n                <div class=\"flex justify-between\">\n                  <span class=\"text-neutral-600\">Tax (8%)</span>\n                  <span class=\"font-medium text-neutral-800\">${{ tax.toFixed(2) }}</span>\n                </div>\n                \n                <!-- Discount Code (if applicable) -->\n                <div v-if=\"discount > 0\" class=\"flex justify-between text-success-600\">\n                  <span>Discount</span>\n                  <span>-${{ discount.toFixed(2) }}</span>\n                </div>\n                \n                <div class=\"border-t border-neutral-200 pt-3 mt-3\">\n                  <div class=\"flex justify-between\">\n                    <span class=\"font-semibold text-neutral-800\">Total</span>\n                    <span class=\"font-bold text-lg text-neutral-900\">${{ orderTotal.toFixed(2) }}</span>\n                  </div>\n                </div>\n              </div>\n              \n              <!-- Promo Code (Only in cart/first step) -->\n              <div v-if=\"activeStep === 0\" class=\"mb-6\">\n                <div class=\"flex gap-2\">\n                  <input type=\"text\" placeholder=\"Promo code\" v-model=\"promoCode\" class=\"input flex-grow\">\n                  <button @click=\"applyPromoCode\" class=\"btn-outline px-4 whitespace-nowrap\">Apply</button>\n                </div>\n                <p v-if=\"promoError\" class=\"text-sm text-accent-600 mt-1\">{{ promoError }}</p>\n                <p v-if=\"promoSuccess\" class=\"text-sm text-success-600 mt-1\">{{ promoSuccess }}</p>\n              </div>\n              \n              <!-- Order Summary Info -->\n              <div class=\"mt-6 bg-neutral-50 rounded-lg p-3\">\n                <h3 class=\"font-medium text-neutral-800 mb-2 text-sm\">Order Information</h3>\n                <ul class=\"text-xs space-y-1.5 text-neutral-600\">\n                  <li class=\"flex\">\n                    <span class=\"i-iconify-ph-shield-check-fill text-success-500 mr-1.5\"></span>\n                    <span>All transactions are secure and encrypted</span>\n                  </li>\n                  <li class=\"flex\">\n                    <span class=\"i-iconify-ph-truck-fill text-primary-500 mr-1.5\"></span>\n                    <span>Orders are typically processed within 24 hours</span>\n                  </li>\n                  <li class=\"flex\">\n                    <span class=\"i-iconify-ph-info-fill text-warning-500 mr-1.5\"></span>\n                    <span>Prescription items require verification before shipping</span>\n                  </li>\n                  <li class=\"flex\">\n                    <span class=\"i-iconify-ph-first-aid-fill text-primary-500 mr-1.5\"></span>\n                    <span>Free shipping on orders over $50</span>\n                  </li>\n                </ul>\n              </div>\n              \n              \n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, watch, onMounted, nextTick } from 'vue'\nimport { useCartStore } from '~/stores/cart'\nimport { useOrdersStore } from '~/stores/orders'\nimport { useNotificationsStore } from '~/stores/notifications'\nimport PaymentForm from '~/components/PaymentForm.vue'\n\ndefinePageMeta({\n  middleware: 'auth'\n})\n\n// Import stores\nconst cartStore = useCartStore()\nconst notifications = useNotificationsStore()\n\n// Checkout steps\nconst checkoutSteps = [\n  { id: 'shipping', name: 'Shipping' },\n  { id: 'payment', name: 'Payment' },\n  { id: 'review', name: 'Review' },\n  { id: 'confirmation', name: 'Confirmation' }\n]\n\n// State\nconst activeStep = ref(0)\nconst sameAsShipping = ref(true)\nconst promoCode = ref('')\nconst promoError = ref('')\nconst promoSuccess = ref('')\nconst discount = ref(0)\nconst errors = ref({})\nconst orderNumber = ref('')\nconst isProcessingPayment = ref(false)\nconst paymentValid = ref(false)\nconst paymentFormRef = ref(null)\n\n// New payment data for PaymentForm component\nconst paymentData = ref({\n  method: 'credit-card',\n  cardDetails: {}\n})\n\n// Computed property for selected payment method\nconst paymentMethod = computed(() => paymentData.value.method || 'credit-card')\n\n// Cart data from store\nconst cartItems = computed(() => cartStore.items)\nconst cartItemCount = computed(() => cartStore.itemCount)\nconst cartTotal = computed(() => cartStore.total)\n\n// Form data\nconst formData = ref({\n  email: '',\n  phone: '',\n  firstName: '',\n  lastName: '',\n  address: '',\n  zipCode: '',\n  country: 'VN',\n  shippingMethod: 'standard',\n  specialInstructions: '',\n  prescriptionFile: null\n})\n\n// Billing address (used if not same as shipping)\nconst billingAddress = ref({\n  firstName: '',\n  lastName: '',\n  address: '',\n  zipCode: '',\n  country: 'VN'\n})\n\n// Payment details\nconst paymentDetails = ref({\n  cardNumber: '',\n  cardName: '',\n  expiryDate: '',\n  cvv: ''\n})\n\n// US States for select dropdown\nconst usStates = [\n  { name: 'Alabama', abbr: 'AL' },\n  { name: 'Alaska', abbr: 'AK' },\n  { name: 'Arizona', abbr: 'AZ' },\n  { name: 'Arkansas', abbr: 'AR' },\n  { name: 'California', abbr: 'CA' },\n  { name: 'Colorado', abbr: 'CO' },\n  { name: 'Connecticut', abbr: 'CT' },\n  { name: 'Delaware', abbr: 'DE' },\n  { name: 'Florida', abbr: 'FL' },\n  { name: 'Georgia', abbr: 'GA' },\n  { name: 'Hawaii', abbr: 'HI' },\n  { name: 'Idaho', abbr: 'ID' },\n  { name: 'Illinois', abbr: 'IL' },\n  { name: 'Indiana', abbr: 'IN' },\n  { name: 'Iowa', abbr: 'IA' },\n  { name: 'Kansas', abbr: 'KS' },\n  { name: 'Kentucky', abbr: 'KY' },\n  { name: 'Louisiana', abbr: 'LA' },\n  { name: 'Maine', abbr: 'ME' },\n  { name: 'Maryland', abbr: 'MD' },\n  { name: 'Massachusetts', abbr: 'MA' },\n  { name: 'Michigan', abbr: 'MI' },\n  { name: 'Minnesota', abbr: 'MN' },\n  { name: 'Mississippi', abbr: 'MS' },\n  { name: 'Missouri', abbr: 'MO' },\n  { name: 'Montana', abbr: 'MT' },\n  { name: 'Nebraska', abbr: 'NE' },\n  { name: 'Nevada', abbr: 'NV' },\n  { name: 'New Hampshire', abbr: 'NH' },\n  { name: 'New Jersey', abbr: 'NJ' },\n  { name: 'New Mexico', abbr: 'NM' },\n  { name: 'New York', abbr: 'NY' },\n  { name: 'North Carolina', abbr: 'NC' },\n  { name: 'North Dakota', abbr: 'ND' },\n  { name: 'Ohio', abbr: 'OH' },\n  { name: 'Oklahoma', abbr: 'OK' },\n  { name: 'Oregon', abbr: 'OR' },\n  { name: 'Pennsylvania', abbr: 'PA' },\n  { name: 'Rhode Island', abbr: 'RI' },\n  { name: 'South Carolina', abbr: 'SC' },\n  { name: 'South Dakota', abbr: 'SD' },\n  { name: 'Tennessee', abbr: 'TN' },\n  { name: 'Texas', abbr: 'TX' },\n  { name: 'Utah', abbr: 'UT' },\n  { name: 'Vermont', abbr: 'VT' },\n  { name: 'Virginia', abbr: 'VA' },\n  { name: 'Washington', abbr: 'WA' },\n  { name: 'West Virginia', abbr: 'WV' },\n  { name: 'Wisconsin', abbr: 'WI' },\n  { name: 'Wyoming', abbr: 'WY' }\n]\n\n// Shipping options\nconst getShippingOptions = () => [\n  {\n    id: 'standard',\n    name: 'Standard Shipping',\n    price: cartTotal.value > 50 ? 0 : 5.99,\n    description: 'Delivery in 3-5 business days',\n    eta: 'Arrives by ' + getFormattedDate(5)\n  },\n  {\n    id: 'express',\n    name: 'Express Shipping',\n    price: 12.99,\n    description: 'Delivery in 2-3 business days',\n    eta: 'Arrives by ' + getFormattedDate(3)\n  },\n  {\n    id: 'next-day',\n    name: 'Next Day Delivery',\n    price: 19.99,\n    description: 'Guaranteed delivery on the next business day',\n    eta: 'Arrives by ' + getFormattedDate(1)\n  }\n]\n\n// Reactive shipping options\nconst shippingOptions = computed(() => getShippingOptions())\n\n// Payment methods (updated to remove PayPal)\nconst paymentMethods = [\n  {\n    id: 'credit-card',\n    name: 'Credit / Debit Card',\n    description: 'Secure payment with Visa, Mastercard, American Express, or Discover',\n    icon: 'iconify-ph-credit-card-fill',\n    secure: true\n  }\n]\n\n\n\n// Calculate tax and order total\nconst selectedShippingOption = computed(() => {\n  try {\n    const found = shippingOptions.value.find(option => option.id === formData.value.shippingMethod)\n    return found || shippingOptions.value[0] || { id: 'standard', name: 'Standard Shipping', price: 5.99 }\n  } catch (error) {\n    console.warn('Error in selectedShippingOption computed:', error)\n    return { id: 'standard', name: 'Standard Shipping', price: 5.99 }\n  }\n})\n\nconst tax = computed(() => {\n  try {\n    return cartTotal.value * 0.08\n  } catch (error) {\n    console.warn('Error calculating tax:', error)\n    return 0\n  }\n})\n\nconst orderTotal = computed(() => {\n  try {\n    return cartTotal.value + selectedShippingOption.value.price + tax.value - discount.value\n  } catch (error) {\n    console.warn('Error calculating order total:', error)\n    return cartTotal.value || 0\n  }\n})\n\n// Check if any items require a prescription\nconst hasPrescriptionItems = computed(() => {\n  return cartItems.value.some(item => item.isRx)\n})\n\n// Card type detection based on first digit\nconst cardType = computed(() => {\n  const number = paymentDetails.value.cardNumber.replace(/\\D/g, '')\n  if (!number) return null\n  \n  if (number.startsWith('4')) return 'ph-visa-logo'\n  if (/^5[1-5]/.test(number)) return 'ph-mastercard-logo'\n  if (/^3[47]/.test(number)) return 'ph-american-express-logo'\n  if (/^6(?:011|5)/.test(number)) return 'ph-discover-logo'\n  \n  return 'ph-credit-card-fill'\n})\n\n// Validation for proceeding to next step\nconst canProceedToNextStep = computed(() => {\n  if (activeStep.value === 0) {\n    // Shipping validation\n    const requiredFields = ['email', 'phone', 'firstName', 'lastName', 'address', 'zipCode', 'country']\n    const isAllRequired = requiredFields.every(field => !!formData.value[field])\n    const isShippingSelected = !!formData.value.shippingMethod\n    const isPrescriptionUploaded = !hasPrescriptionItems.value || (hasPrescriptionItems.value && formData.value.prescriptionFile)\n    \n    return isAllRequired && isShippingSelected && isPrescriptionUploaded\n  }\n  \n  if (activeStep.value === 1) {\n    // Payment validation\n    if (!sameAsShipping.value) {\n      const requiredBillingFields = ['firstName', 'lastName', 'address', 'zipCode', 'country']\n      if (!requiredBillingFields.every(field => !!billingAddress.value[field])) {\n        return false\n      }\n    }\n    \n    // Use the PaymentForm validation\n    return paymentValid.value\n  }\n  \n  return true\n})\n\n// Final validation before placing order\nconst canPlaceOrder = computed(() => {\n  // We can use the same validation as on previous steps\n  // Add any additional final checks here\n  return canProceedToNextStep.value\n})\n\n// Methods\nfunction goToStep(step) {\n  console.log('goToStep called with step:', step, 'current activeStep:', activeStep.value)\n  \n  // Validate target step is within bounds\n  if (step < 0 || step >= checkoutSteps.length) {\n    console.warn('Invalid step:', step)\n    return\n  }\n  \n  // Validate current step before proceeding to next steps\n  if (step > activeStep.value && !validateStep(activeStep.value)) {\n    notifications.error('Please complete all required fields before proceeding.')\n    return\n  }\n  \n  // Reset errors\n  errors.value = {}\n  \n  // Update active step\n  activeStep.value = step\n  \n  // Provide user feedback for step changes\n  if (step > 0) {\n    notifications.success(`Proceeding to ${checkoutSteps[step].name}`)\n  }\n  \n  // Scroll to top smoothly\n  window.scrollTo({\n    top: 0,\n    behavior: 'smooth'\n  })\n  \n  // Focus management for accessibility\n  nextTick(() => {\n    try {\n      const stepElement = document.querySelector('.checkout-step-content')\n      if (stepElement) {\n        stepElement.focus()\n      }\n    } catch (error) {\n      console.warn('Focus management failed:', error)\n    }\n  })\n  \n  console.log('goToStep completed, activeStep is now:', activeStep.value)\n}\n\nfunction validateStep(step) {\n  errors.value = {}\n  let isValid = true\n  \n  if (step === 0) {\n    // Validate shipping info\n    if (!formData.value.email) {\n      errors.value.email = 'Email is required'\n      isValid = false\n    } else if (!isValidEmail(formData.value.email)) {\n      errors.value.email = 'Please enter a valid email address'\n      isValid = false\n    }\n    \n    if (!formData.value.phone) {\n      errors.value.phone = 'Phone number is required'\n      isValid = false\n    }\n    \n    if (!formData.value.firstName) {\n      errors.value.firstName = 'First name is required'\n      isValid = false\n    }\n    \n    if (!formData.value.lastName) {\n      errors.value.lastName = 'Last name is required'\n      isValid = false\n    }\n    \n    if (!formData.value.address) {\n      errors.value.address = 'Address is required'\n      isValid = false\n    }\n    \n    if (!formData.value.zipCode) {\n      errors.value.zipCode = 'Postal code is required'\n      isValid = false\n    }\n    \n    // Validate prescription upload if needed\n    if (hasPrescriptionItems.value && !formData.value.prescriptionFile) {\n      notifications.warning('Please upload a prescription for prescription items')\n      isValid = false\n    }\n  }\n  \n  if (step === 1) {\n    // Validate payment info\n    \n    // Billing address if different from shipping\n    if (!sameAsShipping.value) {\n      if (!billingAddress.value.firstName) {\n        errors.value.billingFirstName = 'First name is required'\n        isValid = false\n      }\n      \n      if (!billingAddress.value.lastName) {\n        errors.value.billingLastName = 'Last name is required'\n        isValid = false\n      }\n      \n      if (!billingAddress.value.address) {\n        errors.value.billingAddress = 'Address is required'\n        isValid = false\n      }\n      \n      if (!billingAddress.value.zipCode) {\n        errors.value.billingZipCode = 'Postal code is required'\n        isValid = false\n      }\n    }\n    \n    // Credit card validation\n    if (paymentMethod.value === 'credit-card') {\n      if (!paymentDetails.value.cardNumber) {\n        errors.value.cardNumber = 'Card number is required'\n        isValid = false\n      } else if (!isValidCreditCard(paymentDetails.value.cardNumber)) {\n        errors.value.cardNumber = 'Please enter a valid card number'\n        isValid = false\n      }\n      \n      if (!paymentDetails.value.cardName) {\n        errors.value.cardName = 'Name on card is required'\n        isValid = false\n      }\n      \n      if (!paymentDetails.value.expiryDate) {\n        errors.value.expiryDate = 'Expiry date is required'\n        isValid = false\n      } else if (!isValidExpiryDate(paymentDetails.value.expiryDate)) {\n        errors.value.expiryDate = 'Please enter a valid expiry date (MM/YY)'\n        isValid = false\n      }\n      \n      if (!paymentDetails.value.cvv) {\n        errors.value.cvv = 'CVV is required'\n        isValid = false\n      } else if (!isValidCVV(paymentDetails.value.cvv)) {\n        errors.value.cvv = 'Please enter a valid CVV'\n        isValid = false\n      }\n    }\n  }\n  \n  return isValid\n}\n\nfunction getFormattedDate(daysFromNow) {\n  const date = new Date()\n  date.setDate(date.getDate() + daysFromNow)\n  return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })\n}\n\nfunction getCountryName(countryCode) {\n  const countries = {\n    'VN': 'Vietnam',\n    'US': 'United States',\n    'CA': 'Canada'\n  }\n  return countries[countryCode] || countryCode\n}\n\nfunction getShippingMethodName() {\n  const option = shippingOptions.value.find(option => option.id === formData.value.shippingMethod)\n  return option ? option.name : 'Standard Shipping'\n}\n\nfunction selectPaymentMethod(method) {\n  paymentMethod.value = method\n}\n\nfunction formatCardNumber() {\n  // Remove any non-digits\n  let value = paymentDetails.value.cardNumber.replace(/\\D/g, '')\n  \n  // Add spaces after every 4 digits\n  value = value.replace(/(\\d{4})(?=\\d)/g, '$1 ')\n  \n  // Update the value\n  paymentDetails.value.cardNumber = value\n}\n\nfunction formatExpiryDate() {\n  // Remove any non-digits\n  let value = paymentDetails.value.expiryDate.replace(/\\D/g, '')\n  \n  // Insert a slash after the month\n  if (value.length > 2) {\n    value = value.substring(0, 2) + '/' + value.substring(2, 4)\n  }\n  \n  // Update the value\n  paymentDetails.value.expiryDate = value\n}\n\nfunction handlePrescriptionUpload(event) {\n  const file = event.target.files[0]\n  if (file) {\n    // In a real app, you would validate file type and size here\n    formData.value.prescriptionFile = file\n  }\n}\n\nfunction applyPromoCode() {\n  promoError.value = ''\n  promoSuccess.value = ''\n  \n  if (promoCode.value.trim() === '') {\n    promoError.value = 'Please enter a promo code'\n    return\n  }\n  \n  // Check for valid promo codes (in a real app, this would be validated against a database)\n  if (promoCode.value.toLowerCase() === 'welcome10') {\n    discount.value = cartTotal.value * 0.1 // 10% discount\n    promoSuccess.value = 'Promo code applied successfully! You saved $' + discount.value.toFixed(2)\n  } else if (promoCode.value.toLowerCase() === 'freeship') {\n    if (selectedShippingOption.value.price > 0) {\n      discount.value = selectedShippingOption.value.price\n      promoSuccess.value = 'Free shipping applied!'\n    } else {\n      promoError.value = 'Free shipping is already applied to orders over $50'\n    }\n  } else {\n    promoError.value = 'Invalid promo code'\n  }\n}\n\n// Payment validation handler\nconst handlePaymentValidation = (isValid) => {\n  console.log('Payment validation changed:', isValid)\n  paymentValid.value = isValid\n}\n\n\n\nasync function placeOrder() {\n  // Final validation\n  if (!canPlaceOrder.value) {\n    notifications.error('Please complete all required fields before placing your order.')\n    return\n  }\n  \n  if (!paymentValid.value) {\n    notifications.error('Please complete your payment information.')\n    return\n  }\n  \n  try {\n    isProcessingPayment.value = true\n    \n    // Generate a random order number\n    orderNumber.value = 'MDP-' + Math.floor(100000 + Math.random() * 900000)\n    \n    // Prepare order data for API\n    const orderData = {\n      orderNumber: orderNumber.value,\n      items: cartItems.value.map(item => ({\n        id: item.id,\n        name: item.name,\n        price: item.price,\n        quantity: item.quantity\n      })),\n      shipping: formData.value,\n      billing: sameAsShipping.value ? formData.value : billingAddress.value,\n      paymentMethod: paymentData.value.method,\n      subtotal: cartTotal.value,\n      tax: tax.value,\n      shippingFee: selectedShippingOption.value.price,\n      total: orderTotal.value,\n      status: 'pending',\n      createdAt: new Date().toISOString()\n    }\n    \n    console.log('Checkout: Preparing order data:', orderData)\n    console.log('Checkout: Cart items before order:', cartItems.value.length)\n    \n    // Skip payment processing for COD (Cash on Delivery)\n    // Payment will be processed on delivery\n    console.log('Checkout: Using Cash on Delivery - no payment processing required')\n    \n    // Create order in database using orders store\n    const ordersStore = useOrdersStore()\n    const createdOrder = await ordersStore.createOrder(orderData)\n    \n    console.log('Checkout: Order creation result:', createdOrder)\n    \n    if (createdOrder) {\n      console.log('Checkout: Order created successfully, clearing cart...')\n      \n      // Clear the cart only after successful order creation\n      try {\n        // Use multiple methods to ensure cart is cleared\n        const cartCleared = cartStore.forceCloseCart()\n        console.log('Checkout: Cart clearing result:', cartCleared)\n        \n        // Backup cart clearing methods\n        cartStore.clearCart()\n        \n        // Additional cleanup: clear any remaining localStorage cart data\n        if (process.client) {\n          const cartKeys = [\n            'pharmacy-cart',\n            'pharmacy-cart-guest',\n            `pharmacy-cart-${cartStore.getCurrentUserId()}`\n          ]\n          \n          cartKeys.forEach(key => {\n            try {\n              localStorage.removeItem(key)\n            } catch (e) {\n              console.warn(`Failed to remove ${key}:`, e)\n            }\n          })\n        }\n        \n        // Force reactive update\n        await nextTick()\n        \n        if (cartCleared || cartItems.value.length === 0) {\n          notifications.success('Order placed successfully! Your cart has been cleared.')\n        } else {\n          notifications.success('Order placed successfully!')\n          console.warn('Cart clearing may have failed, but order was successful')\n        }\n      } catch (cartError) {\n        console.error('Cart clearing failed:', cartError)\n        notifications.success('Order placed successfully! Please refresh to clear your cart.')\n      }\n      \n      // Go to confirmation step\n      goToStep(3)\n      \n      // Scroll to top smoothly\n      window.scrollTo({\n        top: 0,\n        behavior: 'smooth'\n      })\n      \n      console.log('Order placement completed successfully, activeStep is now:', activeStep.value)\n    } else {\n      throw new Error('Order creation failed')\n    }\n    \n  } catch (error) {\n    console.error('Order placement failed:', error)\n    console.error('Error details:', {\n      message: error.message,\n      status: error.status,\n      data: error.data,\n      stack: error.stack\n    })\n    \n    // Provide specific error messages\n    if (error.message?.includes('stock')) {\n      notifications.error('Some items in your cart are out of stock. Please update your cart and try again.')\n    } else if (error.message?.includes('payment')) {\n      notifications.error('Payment processing failed. Please check your payment details and try again.')\n    } else {\n      notifications.error('Failed to place order. Please try again or contact support if the problem persists.')\n    }\n  } finally {\n    isProcessingPayment.value = false\n    console.log('placeOrder function completed, isProcessingPayment:', isProcessingPayment.value)\n  }\n}\n\n// Validation helpers\nfunction isValidEmail(email) {\n  const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n  return re.test(email)\n}\n\nfunction isValidZipCode(zipCode) {\n  const re = /(^\\d{5}$)|(^\\d{5}-\\d{4}$)/\n  return re.test(zipCode)\n}\n\nfunction isValidCreditCard(cardNumber) {\n  // Remove spaces\n  const number = cardNumber.replace(/\\s+/g, '')\n  // Basic validation (better validation would be done on the server)\n  return number.length >= 13 && number.length <= 19 && !isNaN(number)\n}\n\nfunction isValidExpiryDate(expiryDate) {\n  const re = /^(0[1-9]|1[0-2])\\/([0-9]{2})$/\n  if (!re.test(expiryDate)) return false\n  \n  const parts = expiryDate.split('/')\n  const month = parseInt(parts[0], 10)\n  const year = parseInt('20' + parts[1], 10)\n  \n  const now = new Date()\n  const currentYear = now.getFullYear()\n  const currentMonth = now.getMonth() + 1\n  \n  if (year < currentYear) return false\n  if (year === currentYear && month < currentMonth) return false\n  \n  return true\n}\n\nfunction isValidCVV(cvv) {\n  const re = /^[0-9]{3,4}$/\n  return re.test(cvv)\n}\n\n// Update billing address when \"same as shipping\" changes\nwatch(sameAsShipping, (newValue) => {\n  if (newValue) {\n    // Reset errors\n    errors.value = {\n      ...errors.value,\n      billingFirstName: null,\n      billingLastName: null,\n      billingAddress: null,\n      billingZipCode: null,\n      billingCountry: null\n    }\n  }\n})\n\n// When form data changes, update billing address if same as shipping\nwatch(() => formData.value, (newValue) => {\n  try {\n    if (sameAsShipping.value && newValue) {\n      billingAddress.value = {\n        firstName: newValue.firstName || '',\n        lastName: newValue.lastName || '',\n        address: newValue.address || '',\n        zipCode: newValue.zipCode || '',\n        country: newValue.country || 'VN'\n      }\n    }\n  } catch (error) {\n    console.warn('Error updating billing address:', error)\n  }\n}, { deep: true })\n\n// Reset error messages when promo code changes\nwatch(promoCode, () => {\n  promoError.value = ''\n  promoSuccess.value = ''\n})\n\n// Force clear cart function - can be called manually if needed\nconst forceClearCart = async () => {\n  try {\n    console.log('Manually clearing cart...')\n    \n    // Use multiple methods to ensure cart is cleared\n    cartStore.clearCart()\n    const forceCleared = cartStore.forceCloseCart()\n    \n    // Additional cleanup: clear any remaining localStorage cart data\n    if (process.client) {\n      const cartKeys = [\n        'pharmacy-cart',\n        'pharmacy-cart-guest',\n        `pharmacy-cart-${cartStore.getCurrentUserId()}`\n      ]\n      \n      cartKeys.forEach(key => {\n        try {\n          localStorage.removeItem(key)\n        } catch (e) {\n          console.warn(`Failed to remove ${key}:`, e)\n        }\n      })\n      \n      // Clear any other cart-related keys\n      Object.keys(localStorage).forEach(key => {\n        if (key.includes('pharmacy-cart')) {\n          try {\n            localStorage.removeItem(key)\n          } catch (e) {\n            console.warn(`Failed to remove ${key}:`, e)\n          }\n        }\n      })\n    }\n    \n    // Force reactive update\n    await nextTick()\n    \n    notifications.success('Cart cleared successfully!')\n    console.log('Cart cleared successfully')\n    return true\n  } catch (error) {\n    console.error('Error clearing cart:', error)\n    notifications.error('Failed to clear cart. Please refresh the page.')\n    return false\n  }\n}\n\n// When selected shipping method changes, update the order total\nwatch(() => formData.value.shippingMethod, (newMethod, oldMethod) => {\n  try {\n    // Only process if method actually changed and promo code is active\n    if (newMethod !== oldMethod && promoCode.value.toLowerCase() === 'freeship') {\n      const newOption = shippingOptions.value.find(option => option.id === newMethod)\n      if (newOption && typeof newOption.price === 'number') {\n        discount.value = newOption.price\n      }\n    }\n  } catch (error) {\n    console.warn('Error updating shipping discount:', error)\n  }\n})\n\n// Load user data from localStorage if available\nonMounted(() => {\n  try {\n    console.log('Checkout page mounted, cart items:', cartItemCount.value)\n    \n    // If the cart is empty, redirect to the cart page\n    if (cartItemCount.value === 0) {\n      console.log('Cart is empty, redirecting to cart page')\n      navigateTo('/cart')\n    }\n  } catch (error) {\n    console.error('Error in checkout onMounted:', error)\n  }\n})\n</script>\n\n<style scoped>\n/* Ensure proper sticky positioning */\n.sticky {\n  position: -webkit-sticky;\n  position: sticky;\n}\n\n/* Smooth scrolling for the order summary */\n.overflow-y-auto {\n  scrollbar-width: thin;\n  scrollbar-color: #d1d5db #f3f4f6;\n}\n\n.overflow-y-auto::-webkit-scrollbar {\n  width: 6px;\n}\n\n.overflow-y-auto::-webkit-scrollbar-track {\n  background: #f3f4f6;\n  border-radius: 3px;\n}\n\n.overflow-y-auto::-webkit-scrollbar-thumb {\n  background: #d1d5db;\n  border-radius: 3px;\n}\n\n.overflow-y-auto::-webkit-scrollbar-thumb:hover {\n  background: #9ca3af;\n}\n\n/* Animations */\n.animate-fade-in {\n  animation: fadeIn 0.3s ease-in-out;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n/* Ensure the grid container has proper height on mobile */\n@media (max-width: 1023px) {\n  .lg\\:sticky {\n    position: relative !important;\n    top: auto !important;\n    max-height: none !important;\n  }\n}\n</style>"],"version":3}