{"file":"products-SeWkcUmE.js","mappings":"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","names":[],"sources":["../../../../stores/products.js"],"sourcesContent":["import { defineStore } from 'pinia'\r\n\r\nexport const useProductsStore = defineStore('products', {\r\n  state: () => ({\r\n    products: [],\r\n    categories: [],\r\n    currentProduct: null,\r\n    searchResults: [],\r\n    loading: false,\r\n    filters: {\r\n      category: null,\r\n      priceRange: { min: 0, max: 1000 },\r\n      brand: null,\r\n      inStock: true\r\n    },\r\n    pagination: {\r\n      currentPage: 1,\r\n      totalPages: 1,\r\n      totalItems: 0,\r\n      itemsPerPage: 12\r\n    }\r\n  }),\r\n\r\n  getters: {\r\n    getProductById: (state) => {\r\n      return (id) => state.products.find(product => product.id === id)\r\n    },\r\n\r\n    getProductsByCategory: (state) => {\r\n      return (categoryId) => state.products.filter(product => product.categoryId === categoryId)\r\n    },\r\n\r\n    getFeaturedProducts: (state) => {\r\n      return state.products.filter(product => product.featured)\r\n    },\r\n\r\n    getDiscountedProducts: (state) => {\r\n      return state.products.filter(product => product.discount > 0)\r\n    },\r\n\r\n    getInStockProducts: (state) => {\r\n      return state.products.filter(product => product.stock > 0)\r\n    },\r\n\r\n    getCategoryById: (state) => {\r\n      return (id) => state.categories.find(category => category.id === id)\r\n    },\r\n\r\n    getFilteredProducts: (state) => {\r\n      let filtered = [...state.products]\r\n\r\n      if (state.filters.category) {\r\n        filtered = filtered.filter(product => product.categoryId === state.filters.category)\r\n      }\r\n\r\n      if (state.filters.brand) {\r\n        filtered = filtered.filter(product => product.brand === state.filters.brand)\r\n      }\r\n\r\n      if (state.filters.inStock) {\r\n        filtered = filtered.filter(product => product.stock > 0)\r\n      }\r\n\r\n      filtered = filtered.filter(product => \r\n        product.price >= state.filters.priceRange.min && \r\n        product.price <= state.filters.priceRange.max\r\n      )\r\n\r\n      return filtered\r\n    }\r\n  },\r\n\r\n  actions: {\r\n    async fetchProducts(params = {}) {\r\n      this.loading = true\r\n      try {\r\n        const query = new URLSearchParams()\r\n        \r\n        // Add pagination parameters\r\n        query.append('page', params.page || this.pagination.currentPage)\r\n        query.append('limit', params.limit || this.pagination.itemsPerPage)\r\n        \r\n        // Add filter parameters\r\n        if (params.category || this.filters.category) {\r\n          query.append('category', params.category || this.filters.category)\r\n        }\r\n        \r\n        if (params.search) {\r\n          query.append('search', params.search)\r\n        }\r\n        \r\n        if (params.minPrice !== undefined || this.filters.priceRange.min > 0) {\r\n          query.append('minPrice', params.minPrice || this.filters.priceRange.min)\r\n        }\r\n        \r\n        if (params.maxPrice !== undefined || this.filters.priceRange.max < 1000) {\r\n          query.append('maxPrice', params.maxPrice || this.filters.priceRange.max)\r\n        }\r\n        \r\n        if (params.inStock !== undefined) {\r\n          query.append('inStock', params.inStock)\r\n        } else if (this.filters.inStock) {\r\n          query.append('inStock', 'true')\r\n        }\r\n        \r\n        if (params.sortBy) {\r\n          query.append('sortBy', params.sortBy)\r\n        }\r\n        \r\n        if (params.sortOrder) {\r\n          query.append('sortOrder', params.sortOrder)\r\n        }\r\n\r\n        const response = await $fetch(`/api/products?${query.toString()}`)\r\n        \r\n        this.products = response.products || response.data || []\r\n        this.pagination = {\r\n          currentPage: response.pagination?.page || 1,\r\n          totalPages: response.pagination?.totalPages || 1,\r\n          totalItems: response.pagination?.total || this.products.length,\r\n          itemsPerPage: response.pagination?.limit || this.pagination.itemsPerPage\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching products:', error)\r\n        this.products = []\r\n      } finally {\r\n        this.loading = false\r\n      }\r\n    },\r\n\r\n    async fetchProductById(id) {\r\n      this.loading = true\r\n      try {\r\n        const response = await $fetch(`/api/products/${id}`)\r\n        this.currentProduct = response.product || response\r\n        return this.currentProduct\r\n      } catch (error) {\r\n        console.error('Error fetching product:', error)\r\n        this.currentProduct = null\r\n        throw error\r\n      } finally {\r\n        this.loading = false\r\n      }\r\n    },\r\n\r\n    async fetchCategories() {\r\n      try {\r\n        const response = await $fetch('/api/categories')\r\n        this.categories = response.categories || response.data || []\r\n      } catch (error) {\r\n        console.error('Error fetching categories:', error)\r\n        this.categories = []\r\n      }\r\n    },\r\n\r\n    async searchProducts(query, filters = {}) {\r\n      this.loading = true\r\n      try {\r\n        const searchParams = new URLSearchParams()\r\n        searchParams.append('q', query)  // Changed from 'search' to 'q'\r\n        searchParams.append('page', filters.page || this.pagination.currentPage)\r\n        searchParams.append('limit', filters.limit || this.pagination.itemsPerPage)\r\n        \r\n        // Add additional filters\r\n        if (filters.category) {\r\n          searchParams.append('category', filters.category)\r\n        }\r\n        if (filters.minPrice !== undefined) {\r\n          searchParams.append('minPrice', filters.minPrice)\r\n        }\r\n        if (filters.maxPrice !== undefined) {\r\n          searchParams.append('maxPrice', filters.maxPrice)\r\n        }\r\n        if (filters.sortBy) {\r\n          searchParams.append('sortBy', filters.sortBy)\r\n        }\r\n        if (filters.sortOrder) {\r\n          searchParams.append('sortOrder', filters.sortOrder)\r\n        }\r\n\r\n        const response = await $fetch(`/api/products/search?${searchParams.toString()}`)\r\n        \r\n        this.searchResults = response.results || response.data || []\r\n        this.pagination = {\r\n          currentPage: response.pagination?.page || 1,\r\n          totalPages: response.pagination?.totalPages || 1,\r\n          totalItems: response.pagination?.totalItems || this.searchResults.length,\r\n          itemsPerPage: response.pagination?.limit || this.pagination.itemsPerPage\r\n        }\r\n        \r\n        return this.searchResults\r\n      } catch (error) {\r\n        console.error('Error searching products:', error)\r\n        this.searchResults = []\r\n        throw error\r\n      } finally {\r\n        this.loading = false\r\n      }\r\n    },\r\n\r\n    async fetchProductsByCategory(categoryId) {\r\n      this.loading = true\r\n      try {\r\n        const response = await $fetch(`/api/categories/${categoryId}/products`, {\r\n          params: {\r\n            page: this.pagination.currentPage,\r\n            limit: this.pagination.itemsPerPage\r\n          }\r\n        })\r\n        \r\n        this.products = response.products || response.data || []\r\n        this.pagination = {\r\n          ...this.pagination,\r\n          totalPages: response.totalPages || 1,\r\n          totalItems: response.totalItems || this.products.length\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching products by category:', error)\r\n        this.products = []\r\n      } finally {\r\n        this.loading = false\r\n      }\r\n    },\r\n\r\n    setFilters(newFilters) {\r\n      this.filters = { ...this.filters, ...newFilters }\r\n      this.pagination.currentPage = 1 // Reset to first page when filters change\r\n    },\r\n\r\n    clearFilters() {\r\n      this.filters = {\r\n        category: null,\r\n        priceRange: { min: 0, max: 1000 },\r\n        brand: null,\r\n        inStock: true\r\n      }\r\n      this.pagination.currentPage = 1\r\n    },\r\n\r\n    setCurrentPage(page) {\r\n      this.pagination.currentPage = page\r\n    },\r\n\r\n    addToRecentlyViewed(product) {\r\n      // Add product to recently viewed (could be stored in localStorage)\r\n      if (process.client) {\r\n        let recentlyViewed = JSON.parse(localStorage.getItem('recentlyViewed') || '[]')\r\n        \r\n        // Remove if already exists\r\n        recentlyViewed = recentlyViewed.filter(item => item.id !== product.id)\r\n        \r\n        // Add to beginning\r\n        recentlyViewed.unshift(product)\r\n        \r\n        // Keep only last 10 items\r\n        recentlyViewed = recentlyViewed.slice(0, 10)\r\n        \r\n        localStorage.setItem('recentlyViewed', JSON.stringify(recentlyViewed))\r\n      }\r\n    },\r\n\r\n    getRecentlyViewed() {\r\n      if (process.client) {\r\n        return JSON.parse(localStorage.getItem('recentlyViewed') || '[]')\r\n      }\r\n      return []\r\n    },\r\n\r\n    // Inventory Management Functions\r\n    async getInventoryStatus(productId) {\r\n      try {\r\n        const response = await $fetch(`/api/products/${productId}/inventory`)\r\n        return response\r\n      } catch (error) {\r\n        console.error('Error fetching inventory status:', error)\r\n        throw error\r\n      }\r\n    },\r\n\r\n    async updateInventory(productId, stock, operation = 'set') {\r\n      try {\r\n        const response = await $fetch(`/api/products/${productId}/inventory`, {\r\n          method: 'PUT',\r\n          body: { stock, operation }\r\n        })\r\n        \r\n        // Update local product stock if it exists\r\n        const product = this.products.find(p => p.id === productId)\r\n        if (product) {\r\n          product.stock = response.newStock\r\n        }\r\n        \r\n        if (this.currentProduct && this.currentProduct.id === productId) {\r\n          this.currentProduct.stock = response.newStock\r\n        }\r\n        \r\n        return response\r\n      } catch (error) {\r\n        console.error('Error updating inventory:', error)\r\n        throw error\r\n      }\r\n    },\r\n\r\n    async addStock(productId, quantity) {\r\n      return await this.updateInventory(productId, quantity, 'add')\r\n    },\r\n\r\n    async removeStock(productId, quantity) {\r\n      return await this.updateInventory(productId, quantity, 'subtract')\r\n    },\r\n\r\n    async setStock(productId, quantity) {\r\n      return await this.updateInventory(productId, quantity, 'set')\r\n    },\r\n\r\n    // Enhanced product management functions\r\n    async addProduct(productData) {\r\n      try {\r\n        const response = await $fetch('/api/products', {\r\n          method: 'POST',\r\n          body: productData\r\n        })\r\n        \r\n        this.products.unshift(response.product)\r\n        return response\r\n      } catch (error) {\r\n        console.error('Error adding product:', error)\r\n        throw error\r\n      }\r\n    },\r\n\r\n    async updateProduct(productId, productData) {\r\n      try {\r\n        const response = await $fetch(`/api/products/${productId}`, {\r\n          method: 'PUT',\r\n          body: productData\r\n        })\r\n        \r\n        const index = this.products.findIndex(p => p.id === productId)\r\n        if (index !== -1) {\r\n          this.products[index] = response.product\r\n        }\r\n        \r\n        if (this.currentProduct && this.currentProduct.id === productId) {\r\n          this.currentProduct = response.product\r\n        }\r\n        \r\n        return response\r\n      } catch (error) {\r\n        console.error('Error updating product:', error)\r\n        throw error\r\n      }\r\n    },\r\n\r\n    async deleteProduct(productId) {\r\n      try {\r\n        await $fetch(`/api/products/${productId}`, {\r\n          method: 'DELETE'\r\n        })\r\n        \r\n        this.products = this.products.filter(p => p.id !== productId)\r\n        \r\n        if (this.currentProduct && this.currentProduct.id === productId) {\r\n          this.currentProduct = null\r\n        }\r\n        \r\n        return { success: true }\r\n      } catch (error) {\r\n        console.error('Error deleting product:', error)\r\n        throw error\r\n      }\r\n    },\r\n\r\n    // Category management functions\r\n    async addCategory(categoryData) {\r\n      try {\r\n        const response = await $fetch('/api/categories', {\r\n          method: 'POST',\r\n          body: categoryData\r\n        })\r\n        \r\n        this.categories.push(response.category)\r\n        return response\r\n      } catch (error) {\r\n        console.error('Error adding category:', error)\r\n        throw error\r\n      }\r\n    },\r\n\r\n    async updateCategory(categoryId, categoryData) {\r\n      try {\r\n        const response = await $fetch(`/api/categories/${categoryId}`, {\r\n          method: 'PUT',\r\n          body: categoryData\r\n        })\r\n        \r\n        const index = this.categories.findIndex(c => c.id === categoryId)\r\n        if (index !== -1) {\r\n          this.categories[index] = response.category\r\n        }\r\n        \r\n        return response\r\n      } catch (error) {\r\n        console.error('Error updating category:', error)\r\n        throw error\r\n      }\r\n    },\r\n\r\n    async deleteCategory(categoryId) {\r\n      try {\r\n        await $fetch(`/api/categories/${categoryId}`, {\r\n          method: 'DELETE'\r\n        })\r\n        \r\n        this.categories = this.categories.filter(c => c.id !== categoryId)\r\n        return { success: true }\r\n      } catch (error) {\r\n        console.error('Error deleting category:', error)\r\n        throw error\r\n      }\r\n    },\r\n\r\n    // Advanced filtering and searching\r\n    async fetchProductsWithAdvancedFilters(filters) {\r\n      this.loading = true\r\n      try {\r\n        const response = await $fetch('/api/products/advanced-search', {\r\n          params: {\r\n            ...filters,\r\n            page: this.pagination.currentPage,\r\n            limit: this.pagination.itemsPerPage\r\n          }\r\n        })\r\n        \r\n        this.products = response.products || []\r\n        this.pagination = {\r\n          ...this.pagination,\r\n          totalPages: response.totalPages || 1,\r\n          totalItems: response.totalItems || this.products.length\r\n        }\r\n        \r\n        return response\r\n      } catch (error) {\r\n        console.error('Error fetching products with advanced filters:', error)\r\n        this.products = []\r\n        throw error\r\n      } finally {\r\n        this.loading = false\r\n      }\r\n    },\r\n\r\n    // Bulk operations\r\n    async bulkUpdateStock(updates) {\r\n      try {\r\n        const response = await $fetch('/api/products/bulk-inventory', {\r\n          method: 'PUT',\r\n          body: { updates }\r\n        })\r\n        \r\n        // Update local stock for affected products\r\n        updates.forEach(update => {\r\n          const product = this.products.find(p => p.id === update.productId)\r\n          if (product && response.results[update.productId]) {\r\n            product.stock = response.results[update.productId].newStock\r\n          }\r\n        })\r\n        \r\n        return response\r\n      } catch (error) {\r\n        console.error('Error bulk updating stock:', error)\r\n        throw error\r\n      }\r\n    },\r\n\r\n    // Low stock alerts\r\n    getLowStockProducts(threshold = 10) {\r\n      return this.products.filter(product => \r\n        product.stock > 0 && product.stock <= threshold\r\n      )\r\n    },\r\n\r\n    getOutOfStockProducts() {\r\n      return this.products.filter(product => product.stock === 0)\r\n    }\r\n  }\r\n})\r\n"],"version":3}