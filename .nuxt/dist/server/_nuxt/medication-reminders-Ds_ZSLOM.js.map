{"version":3,"file":"medication-reminders-Ds_ZSLOM.js","sources":["../../../../pages/account/medication-reminders.vue"],"sourcesContent":["<template>\r\n  <div class=\"py-8 md:py-12\">\r\n    <div class=\"container-custom\">\r\n      <h1 class=\"text-2xl md:text-3xl font-bold text-neutral-900 mb-6\">Medication Reminders</h1>\r\n      \r\n      <div class=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\r\n        <!-- Add new reminder form -->\r\n        <div class=\"lg:col-span-1\">\r\n          <div class=\"bg-white rounded-lg shadow-sm p-6\">\r\n            <h2 class=\"text-lg font-semibold text-neutral-800 mb-4\">\r\n              {{ isEditing ? 'Edit Reminder' : 'Add New Reminder' }}\r\n            </h2>\r\n            <form @submit.prevent=\"addReminder\" class=\"space-y-4\">\r\n              <div>\r\n                <label class=\"block text-sm font-medium text-neutral-700 mb-1\">Medication Name *</label>\r\n                <input v-model=\"newReminder.medicationName\" type=\"text\" class=\"input\" required placeholder=\"Enter medication name\">\r\n              </div>\r\n              <div>\r\n                <label class=\"block text-sm font-medium text-neutral-700 mb-1\">Dosage</label>\r\n                <input v-model=\"newReminder.dosage\" type=\"text\" class=\"input\" placeholder=\"e.g., 1 tablet, 5ml\">\r\n              </div>\r\n              <div>\r\n                <label class=\"block text-sm font-medium text-neutral-700 mb-1\">Frequency *</label>\r\n                <select v-model=\"newReminder.frequency\" class=\"input\" required>\r\n                  <option value=\"daily\">Daily</option>\r\n                  <option value=\"twice-daily\">Twice Daily</option>\r\n                  <option value=\"three-times-daily\">Three Times Daily</option>\r\n                  <option value=\"every-8-hours\">Every 8 hours</option>\r\n                  <option value=\"every-12-hours\">Every 12 hours</option>\r\n                  <option value=\"weekly\">Weekly</option>\r\n                  <option value=\"as-needed\">As Needed</option>\r\n                </select>\r\n              </div>\r\n              <div>\r\n                <label class=\"block text-sm font-medium text-neutral-700 mb-1\">Reminder Times</label>\r\n                <div class=\"space-y-2\">\r\n                  <div v-for=\"(time, index) in newReminder.timeSlots\" :key=\"index\" class=\"flex items-center gap-2\">\r\n                    <input v-model=\"newReminder.timeSlots[index]\" type=\"time\" class=\"input flex-1\">\r\n                    <button type=\"button\" @click=\"removeTimeSlot(index)\" class=\"text-red-500 hover:text-red-700 p-1 rounded border hover:bg-red-50\">\r\n                      üóëÔ∏è\r\n                    </button>\r\n                  </div>\r\n                  <button type=\"button\" @click=\"addTimeSlot\" class=\"text-sm text-primary-600 hover:text-primary-700\">\r\n                    + Add Time\r\n                  </button>\r\n                </div>\r\n              </div>\r\n              <div>\r\n                <label class=\"block text-sm font-medium text-neutral-700 mb-1\">Notes</label>\r\n                <textarea v-model=\"newReminder.notes\" class=\"input h-20\" placeholder=\"Any additional notes\"></textarea>\r\n              </div>\r\n              <div class=\"flex gap-2\">\r\n                <button type=\"submit\" class=\"btn-primary flex-1\" :disabled=\"loading\">\r\n                  <span v-if=\"loading\" class=\"i-iconify-ph-spinner text-lg animate-spin mr-2\"></span>\r\n                  {{ isEditing ? 'Update Reminder' : 'Add Reminder' }}\r\n                </button>\r\n                <button \r\n                  v-if=\"isEditing\" \r\n                  type=\"button\" \r\n                  @click=\"cancelEdit\" \r\n                  class=\"btn-outline px-4\"\r\n                >\r\n                  Cancel\r\n                </button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- Current reminders -->\r\n        <div class=\"lg:col-span-2\">\r\n          <div class=\"bg-white rounded-lg shadow-sm overflow-hidden\">\r\n            <div class=\"p-6 border-b border-neutral-200\">\r\n              <div class=\"flex items-center justify-between\">\r\n                <h2 class=\"text-lg font-semibold text-neutral-800\">Your Active Reminders</h2>\r\n                <div class=\"flex items-center gap-2\">\r\n                  <button \r\n                    @click=\"loadReminders\"\r\n                    class=\"btn-outline text-sm px-3 py-1\"\r\n                    title=\"Refresh reminders\"\r\n                  >\r\n                    Refresh\r\n                  </button>\r\n                  <button \r\n                    @click=\"showActive = true\" \r\n                    :class=\"showActive ? 'btn-primary' : 'btn-outline'\"\r\n                    class=\"text-sm px-3 py-1\"\r\n                  >\r\n                    Active\r\n                  </button>\r\n                  <button \r\n                    @click=\"showActive = false\" \r\n                    :class=\"!showActive ? 'btn-primary' : 'btn-outline'\"\r\n                    class=\"text-sm px-3 py-1\"\r\n                  >\r\n                    All\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <div v-if=\"loading\" class=\"p-6 text-center\">\r\n              <div class=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600 mx-auto\"></div>\r\n              <p class=\"text-neutral-500 mt-2\">Loading reminders...</p>\r\n            </div>\r\n            \r\n            <div v-else-if=\"filteredReminders.length === 0\" class=\"p-6 text-center\">\r\n              <div class=\"w-16 h-16 mx-auto mb-4 rounded-full bg-neutral-100 flex items-center justify-center\">\r\n                <span class=\"text-2xl\">üîï</span>\r\n              </div>\r\n              <p class=\"text-neutral-500\">{{ showActive ? 'No active reminders set up yet.' : 'No reminders found.' }}</p>\r\n            </div>\r\n            \r\n            <div v-else class=\"divide-y divide-neutral-100\">\r\n              <div v-for=\"reminder in filteredReminders\" :key=\"reminder.id\" class=\"p-6\">\r\n                <div class=\"flex items-start justify-between\">\r\n                  <div class=\"flex-1\">\r\n                    <div class=\"flex items-center gap-3 mb-2\">\r\n                      <h3 class=\"font-semibold text-neutral-900\">{{ reminder.medicationName }}</h3>\r\n                      <span \r\n                        :class=\"reminder.isActive ? 'bg-success-100 text-success-800' : 'bg-neutral-100 text-neutral-800'\"\r\n                        class=\"px-2 py-1 text-xs rounded-full\"\r\n                      >\r\n                        {{ reminder.isActive ? 'Active' : 'Inactive' }}\r\n                      </span>\r\n                    </div>\r\n                    \r\n                    <div class=\"space-y-1 text-sm text-neutral-600\">\r\n                      <p v-if=\"reminder.dosage\" class=\"flex items-center gap-2\">\r\n                        <span class=\"text-primary-500\">üíä</span>\r\n                        <span>{{ reminder.dosage }}</span>\r\n                      </p>\r\n                      <p class=\"flex items-center gap-2\">\r\n                        <span class=\"text-primary-500\">‚è∞</span>\r\n                        <span>{{ formatFrequency(reminder.frequency) }}</span>\r\n                      </p>\r\n                      <div v-if=\"reminder.timeSlots && reminder.timeSlots.length > 0\" class=\"flex items-center gap-2\">\r\n                        <span class=\"text-primary-500\">üîî</span>\r\n                        <span>{{ reminder.timeSlots.join(', ') }}</span>\r\n                      </div>\r\n                      <p v-if=\"reminder.nextReminder\" class=\"flex items-center gap-2\">\r\n                        <span class=\"text-primary-500\">üìÖ</span>\r\n                        <span>Next: {{ formatDate(reminder.nextReminder) }}</span>\r\n                      </p>\r\n                      <p v-if=\"reminder.notes\" class=\"flex items-start gap-2 mt-2\">\r\n                        <span class=\"text-primary-500 mt-0.5\">üìù</span>\r\n                        <span>{{ reminder.notes }}</span>\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div class=\"flex items-center gap-2 ml-4\">\r\n                    <!-- Pause/Resume Button -->\r\n                    <button \r\n                      @click=\"toggleReminder(reminder)\"\r\n                      :class=\"reminder.isActive ? 'text-orange-600 hover:text-orange-700 hover:bg-orange-50' : 'text-green-600 hover:text-green-700 hover:bg-green-50'\"\r\n                      class=\"p-2 rounded-lg transition-colors border border-gray-200 hover:border-current\"\r\n                      :title=\"reminder.isActive ? 'Pause reminder' : 'Resume reminder'\"\r\n                    >\r\n                      {{ reminder.isActive ? '‚è∏Ô∏è' : '‚ñ∂Ô∏è' }}\r\n                      <span class=\"sr-only\">{{ reminder.isActive ? 'Pause' : 'Resume' }}</span>\r\n                    </button>\r\n                    \r\n                    <!-- Edit Button -->\r\n                    <button \r\n                      @click=\"editReminder(reminder)\"\r\n                      class=\"p-2 text-blue-600 hover:text-blue-700 hover:bg-blue-50 rounded-lg transition-colors border border-gray-200 hover:border-blue-300\"\r\n                      title=\"Edit reminder\"\r\n                    >\r\n                      ‚úèÔ∏è\r\n                      <span class=\"sr-only\">Edit</span>\r\n                    </button>\r\n                    \r\n                    <!-- Delete Button -->\r\n                    <button \r\n                      @click=\"deleteReminder(reminder.id)\"\r\n                      class=\"p-2 text-red-600 hover:text-red-700 hover:bg-red-50 rounded-lg transition-colors border border-gray-200 hover:border-red-300\"\r\n                      title=\"Delete reminder\"\r\n                    >\r\n                      üóëÔ∏è\r\n                      <span class=\"sr-only\">Delete</span>\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed, onMounted, watch } from 'vue'\r\nimport { useNotificationsStore } from '~/stores/notifications'\r\nimport { useAuthStore } from '~/stores/auth'\r\n\r\ndefinePageMeta({\r\n  middleware: 'auth'\r\n})\r\n\r\nconst notifications = useNotificationsStore()\r\nconst authStore = useAuthStore()\r\n\r\nconst reminders = ref([])\r\nconst loading = ref(false)\r\nconst showActive = ref(true)\r\nconst isEditing = ref(false)\r\nconst editingReminderId = ref(null)\r\n\r\nconst newReminder = ref({\r\n  medicationName: '',\r\n  dosage: '',\r\n  frequency: 'daily',\r\n  timeSlots: ['08:00'],\r\n  notes: ''\r\n})\r\n\r\nconst filteredReminders = computed(() => {\r\n  let filtered = reminders.value\r\n  if (showActive.value) {\r\n    filtered = reminders.value.filter(r => r.isActive)\r\n  }\r\n  return sortReminders([...filtered])\r\n})\r\n\r\n// Load reminders from API\r\nconst loadReminders = async () => {\r\n  try {\r\n    loading.value = true\r\n    const response = await $fetch('/api/medication-reminders', {\r\n      headers: {\r\n        Authorization: `Bearer ${authStore.token}`\r\n      }\r\n    })\r\n    \r\n    console.log('=== LOAD REMINDERS DEBUG ===')\r\n    console.log('API Response:', response)\r\n    console.log('Reminders from API:', response.reminders)\r\n    console.log('Number of reminders loaded:', response.reminders?.length || 0)\r\n    \r\n    // Calculate next reminder times and sort\r\n    const processedReminders = (response.reminders || []).map(reminder => ({\r\n      ...reminder,\r\n      nextReminder: reminder.isActive ? calculateNextReminder(reminder.frequency, reminder.timeSlots) : null\r\n    }))\r\n    \r\n    reminders.value = processedReminders\r\n    console.log('Processed reminders with IDs:', reminders.value.map(r => ({ \r\n      id: r.id, \r\n      name: r.medicationName,\r\n      idType: typeof r.id \r\n    })))\r\n    console.log('=== END LOAD REMINDERS DEBUG ===')\r\n  } catch (error) {\r\n    console.error('Error loading reminders:', error)\r\n    notifications.error('Failed to load medication reminders')\r\n  } finally {\r\n    loading.value = false\r\n  }\r\n}\r\n\r\nconst addReminder = async () => {\r\n  try {\r\n    loading.value = true\r\n    \r\n    if (!validateReminder()) {\r\n      return\r\n    }\r\n\r\n    if (isEditing.value) {\r\n      // Update existing reminder\r\n      const response = await $fetch(`/api/medication-reminders/${editingReminderId.value}`, {\r\n        method: 'PATCH',\r\n        body: newReminder.value,\r\n        headers: {\r\n          Authorization: `Bearer ${authStore.token}`\r\n        }\r\n      })\r\n\r\n      const index = reminders.value.findIndex(r => r.id === editingReminderId.value)\r\n      if (index !== -1) {\r\n        reminders.value[index] = response.reminder\r\n      }\r\n      notifications.success('Medication reminder updated successfully!')\r\n      cancelEdit()\r\n    } else {\r\n      // Add new reminder\r\n      console.log('=== CREATING NEW REMINDER ===')\r\n      console.log('Request data:', newReminder.value)\r\n      console.log('Auth token:', authStore.token ? 'EXISTS' : 'MISSING')\r\n      \r\n      const response = await $fetch('/api/medication-reminders', {\r\n        method: 'POST',\r\n        body: newReminder.value,\r\n        headers: {\r\n          Authorization: `Bearer ${authStore.token}`\r\n        }\r\n      })\r\n\r\n      console.log('‚úÖ CREATE SUCCESS - Response:', response)\r\n      console.log('New reminder received:', response.reminder)\r\n      console.log('Current reminders before adding:', reminders.value.length)\r\n      \r\n      reminders.value.unshift(response.reminder)\r\n      \r\n      console.log('Current reminders after adding:', reminders.value.length)\r\n      console.log('All reminder IDs:', reminders.value.map(r => r.id))\r\n      \r\n      notifications.success('Medication reminder added successfully!')\r\n    }\r\n    \r\n    // Reset form\r\n    resetForm()\r\n  } catch (error) {\r\n    console.error('Error saving reminder:', error)\r\n    notifications.error(`Failed to ${isEditing.value ? 'update' : 'add'} medication reminder`)\r\n  } finally {\r\n    loading.value = false\r\n  }\r\n}\r\n\r\nconst toggleReminder = async (reminder) => {\r\n  try {\r\n    const response = await $fetch(`/api/medication-reminders/${reminder.id}`, {\r\n      method: 'PATCH',\r\n      body: {\r\n        isActive: !reminder.isActive\r\n      },\r\n      headers: {\r\n        Authorization: `Bearer ${authStore.token}`\r\n      }\r\n    })\r\n    \r\n    reminder.isActive = response.reminder.isActive\r\n    notifications.success(`Reminder ${reminder.isActive ? 'resumed' : 'paused'} successfully`)\r\n  } catch (error) {\r\n    console.error('Error toggling reminder:', error)\r\n    notifications.error('Failed to update reminder')\r\n  }\r\n}\r\n\r\nconst deleteReminder = async (reminderId) => {\r\n  console.log('=== DELETE FUNCTION CALLED ===')\r\n  console.log('Raw reminderId parameter:', reminderId)\r\n  console.log('Type of reminderId:', typeof reminderId)\r\n  console.log('Is undefined?', reminderId === undefined)\r\n  console.log('Is null?', reminderId === null)\r\n  \r\n  if (!confirm('Are you sure you want to delete this reminder?')) {\r\n    return\r\n  }\r\n\r\n  try {\r\n    // Refresh data first to ensure we have the latest state\r\n    console.log('üîÑ Refreshing data before delete...')\r\n    await loadReminders()\r\n    \r\n    console.log('=== DELETE REMINDER DEBUG ===')\r\n    console.log('Attempting to delete reminder:', { \r\n      id: reminderId, \r\n      type: typeof reminderId,\r\n      currentReminders: reminders.value.map(r => ({ id: r.id, name: r.medicationName, type: typeof r.id }))\r\n    })\r\n    console.log('Auth token exists:', !!authStore.token)\r\n    console.log('User info:', { userId: authStore.user?.id, email: authStore.user?.email })\r\n    \r\n    // Check if reminderId is valid\r\n    if (reminderId === undefined || reminderId === null) {\r\n      console.log('‚ùå Invalid reminderId - cannot proceed with delete')\r\n      notifications.error('Invalid reminder ID - cannot delete')\r\n      return\r\n    }\r\n    \r\n    // Check if reminder exists in current list (after refresh)\r\n    const reminderExists = reminders.value.find(r => r.id === reminderId)\r\n    console.log('Reminder exists in current list (after refresh):', !!reminderExists)\r\n    if (reminderExists) {\r\n      console.log('Found reminder to delete:', { \r\n        id: reminderExists.id, \r\n        name: reminderExists.medicationName,\r\n        userId: reminderExists.userId \r\n      })\r\n    } else {\r\n      console.log('‚ùå Reminder not found in current list even after refresh!')\r\n      console.log('Available reminder IDs:', reminders.value.map(r => r.id))\r\n      console.log('Looking for ID:', reminderId)\r\n      notifications.error('Reminder no longer exists - data refreshed')\r\n      return\r\n    }\r\n    \r\n    const response = await $fetch(`/api/medication-reminders/${reminderId}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        Authorization: `Bearer ${authStore.token}`\r\n      }\r\n    })\r\n    \r\n    console.log('Delete response:', response)\r\n    reminders.value = reminders.value.filter(r => r.id !== reminderId)\r\n    notifications.success('Reminder deleted successfully')\r\n  } catch (error) {\r\n    console.error('=== DELETE ERROR ===')\r\n    console.error('Error deleting reminder:', error)\r\n    console.log('Error details:', {\r\n      status: error.status,\r\n      statusCode: error.statusCode,\r\n      statusMessage: error.statusMessage,\r\n      data: error.data\r\n    })\r\n    notifications.error('Failed to delete reminder: ' + (error.data?.statusMessage || error.statusMessage || error.message))\r\n  }\r\n}\r\n\r\nconst editReminder = (reminder) => {\r\n  isEditing.value = true\r\n  editingReminderId.value = reminder.id\r\n  \r\n  newReminder.value = {\r\n    medicationName: reminder.medicationName,\r\n    dosage: reminder.dosage || '',\r\n    frequency: reminder.frequency,\r\n    timeSlots: [...(reminder.timeSlots || ['08:00'])],\r\n    notes: reminder.notes || ''\r\n  }\r\n  \r\n  // Scroll to form\r\n  window.scrollTo({ top: 0, behavior: 'smooth' })\r\n  notifications.info('Editing reminder - modify details and click \"Update Reminder\"')\r\n}\r\n\r\nconst cancelEdit = () => {\r\n  isEditing.value = false\r\n  editingReminderId.value = null\r\n  resetForm()\r\n  notifications.info('Edit cancelled')\r\n}\r\n\r\nconst resetForm = () => {\r\n  newReminder.value = {\r\n    medicationName: '',\r\n    dosage: '',\r\n    frequency: 'daily',\r\n    timeSlots: ['08:00'],\r\n    notes: ''\r\n  }\r\n}\r\n\r\nconst validateReminder = () => {\r\n  if (!newReminder.value.medicationName.trim()) {\r\n    notifications.error('Please enter a medication name')\r\n    return false\r\n  }\r\n  \r\n  if (!validateTimeSlots()) {\r\n    return false\r\n  }\r\n  \r\n  return true\r\n}\r\n\r\nconst validateTimeSlots = () => {\r\n  for (const timeSlot of newReminder.value.timeSlots) {\r\n    if (!timeSlot || !/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/.test(timeSlot)) {\r\n      notifications.error('Please enter valid time slots (HH:MM format)')\r\n      return false\r\n    }\r\n  }\r\n  return true\r\n}\r\n\r\nconst sortReminders = (reminders) => {\r\n  return reminders.sort((a, b) => {\r\n    // Sort by active status first, then by next reminder time\r\n    if (a.isActive !== b.isActive) {\r\n      return b.isActive - a.isActive\r\n    }\r\n    if (a.nextReminder && b.nextReminder) {\r\n      return new Date(a.nextReminder) - new Date(b.nextReminder)\r\n    }\r\n    return a.medicationName.localeCompare(b.medicationName)\r\n  })\r\n}\r\n\r\nconst calculateNextReminder = (frequency, timeSlots) => {\r\n  if (!timeSlots || timeSlots.length === 0) return null\r\n  \r\n  const now = new Date()\r\n  const today = new Date(now.getFullYear(), now.getMonth(), now.getDate())\r\n  \r\n  // Find the next time slot today or tomorrow\r\n  for (const timeSlot of timeSlots.sort()) {\r\n    const [hours, minutes] = timeSlot.split(':').map(Number)\r\n    const reminderTime = new Date(today)\r\n    reminderTime.setHours(hours, minutes, 0, 0)\r\n    \r\n    if (reminderTime > now) {\r\n      return reminderTime\r\n    }\r\n  }\r\n  \r\n  // No more times today, get first time tomorrow\r\n  const tomorrow = new Date(today)\r\n  tomorrow.setDate(tomorrow.getDate() + 1)\r\n  const [hours, minutes] = timeSlots.sort()[0].split(':').map(Number)\r\n  tomorrow.setHours(hours, minutes, 0, 0)\r\n  \r\n  return tomorrow\r\n}\r\n\r\nconst addTimeSlot = () => {\r\n  newReminder.value.timeSlots.push('09:00')\r\n}\r\n\r\nconst removeTimeSlot = (index) => {\r\n  if (newReminder.value.timeSlots.length > 1) {\r\n    newReminder.value.timeSlots.splice(index, 1)\r\n  }\r\n}\r\n\r\nconst formatFrequency = (frequency) => {\r\n  const frequencies = {\r\n    'daily': 'Once daily',\r\n    'twice-daily': 'Twice daily',\r\n    'three-times-daily': 'Three times daily',\r\n    'every-8-hours': 'Every 8 hours',\r\n    'every-12-hours': 'Every 12 hours',\r\n    'weekly': 'Weekly',\r\n    'as-needed': 'As needed'\r\n  }\r\n  return frequencies[frequency] || frequency\r\n}\r\n\r\nconst formatDate = (dateString) => {\r\n  const date = new Date(dateString)\r\n  return date.toLocaleDateString('en-US', { \r\n    month: 'short', \r\n    day: 'numeric',\r\n    hour: '2-digit',\r\n    minute: '2-digit'\r\n  })\r\n}\r\n\r\nonMounted(() => {\r\n  loadReminders()\r\n})\r\n</script>"],"names":["reminders"],"mappings":";;;;;;;;;;;;;;;;;;;AA0MsB,0BAAsB;AAC1B,iBAAa;AAEzB,UAAA,YAAY,IAAI,EAAE;AAClB,UAAA,UAAU,IAAI,KAAK;AACnB,UAAA,aAAa,IAAI,IAAI;AACrB,UAAA,YAAY,IAAI,KAAK;AACD,QAAI,IAAI;AAElC,UAAM,cAAc,IAAI;AAAA,MACtB,gBAAgB;AAAA,MAChB,QAAQ;AAAA,MACR,WAAW;AAAA,MACX,WAAW,CAAC,OAAO;AAAA,MACnB,OAAO;AAAA,IAAA,CACR;AAEK,UAAA,oBAAoB,SAAS,MAAM;AACvC,UAAI,WAAW,UAAU;AACzB,UAAI,WAAW,OAAO;AACpB,mBAAW,UAAU,MAAM,OAAO,CAAA,MAAK,EAAE,QAAQ;AAAA,MAAA;AAEnD,aAAO,cAAc,CAAC,GAAG,QAAQ,CAAC;AAAA,IAAA,CACnC;AAuPK,UAAA,gBAAgB,CAACA,eAAc;AACnC,aAAOA,WAAU,KAAK,CAAC,GAAG,MAAM;AAE1B,YAAA,EAAE,aAAa,EAAE,UAAU;AACtB,iBAAA,EAAE,WAAW,EAAE;AAAA,QAAA;AAEpB,YAAA,EAAE,gBAAgB,EAAE,cAAc;AAC7B,iBAAA,IAAI,KAAK,EAAE,YAAY,IAAI,IAAI,KAAK,EAAE,YAAY;AAAA,QAAA;AAE3D,eAAO,EAAE,eAAe,cAAc,EAAE,cAAc;AAAA,MAAA,CACvD;AAAA,IACH;AAsCM,UAAA,kBAAkB,CAAC,cAAc;AACrC,YAAM,cAAc;AAAA,QAClB,SAAS;AAAA,QACT,eAAe;AAAA,QACf,qBAAqB;AAAA,QACrB,iBAAiB;AAAA,QACjB,kBAAkB;AAAA,QAClB,UAAU;AAAA,QACV,aAAa;AAAA,MACf;AACO,aAAA,YAAY,SAAS,KAAK;AAAA,IACnC;AAEM,UAAA,aAAa,CAAC,eAAe;AAC3B,YAAA,OAAO,IAAI,KAAK,UAAU;AACzB,aAAA,KAAK,mBAAmB,SAAS;AAAA,QACtC,OAAO;AAAA,QACP,KAAK;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,MAAA,CACT;AAAA,IACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}