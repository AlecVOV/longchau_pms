{"file":"notifications-CugxVEC_.js","mappings":";AAEY,MAAC,wBAAwB,YAAY,iBAAiB;AAAA,EAChE,OAAO,OAAO;AAAA,IACZ,eAAe,CAAE;AAAA,EACrB;AAAA,EAEE,SAAS;AAAA,IACP,IAAI,cAAc;AAChB,YAAM,KAAK,KAAK,IAAG,IAAK,KAAK,OAAQ;AACrC,YAAM,kBAAkB;AAAA,QACtB;AAAA,QACA,MAAM;AAAA;AAAA,QACN,OAAO;AAAA,QACP,SAAS;AAAA,QACT,UAAU;AAAA;AAAA,QACV,YAAY;AAAA;AAAA,QACZ,SAAS,CAAE;AAAA;AAAA,QACX,GAAG;AAAA,MACJ;AAED,WAAK,cAAc,KAAK,eAAe;AAGvC,UAAI,CAAC,gBAAgB,cAAc,gBAAgB,WAAW,GAAG;AAC/D,mBAAW,MAAM;AACf,eAAK,OAAO,EAAE;AAAA,QACxB,GAAW,gBAAgB,QAAQ;AAAA,MAC5B;AAED,aAAO;AAAA,IACR;AAAA,IAED,OAAO,IAAI;AACT,YAAM,QAAQ,KAAK,cAAc,UAAU,OAAK,EAAE,OAAO,EAAE;AAC3D,UAAI,QAAQ,IAAI;AACd,aAAK,cAAc,OAAO,OAAO,CAAC;AAAA,MACnC;AAAA,IACF;AAAA,IAED,QAAQ;AACN,WAAK,gBAAgB,CAAE;AAAA,IACxB;AAAA;AAAA,IAGD,QAAQ,SAAS,UAAU,IAAI;AAC7B,aAAO,KAAK,IAAI;AAAA,QACd,MAAM;AAAA,QACN;AAAA,QACA,GAAG;AAAA,MACX,CAAO;AAAA,IACF;AAAA,IAED,MAAM,SAAS,UAAU,IAAI;AAC3B,aAAO,KAAK,IAAI;AAAA,QACd,MAAM;AAAA,QACN;AAAA,QACA,UAAU;AAAA;AAAA,QACV,GAAG;AAAA,MACX,CAAO;AAAA,IACF;AAAA,IAED,QAAQ,SAAS,UAAU,IAAI;AAC7B,aAAO,KAAK,IAAI;AAAA,QACd,MAAM;AAAA,QACN;AAAA,QACA,UAAU;AAAA,QACV,GAAG;AAAA,MACX,CAAO;AAAA,IACF;AAAA,IAED,KAAK,SAAS,UAAU,IAAI;AAC1B,aAAO,KAAK,IAAI;AAAA,QACd,MAAM;AAAA,QACN;AAAA,QACA,GAAG;AAAA,MACX,CAAO;AAAA,IACF;AAAA;AAAA,IAGD,QAAQ,SAAS,UAAU,IAAI;AAC7B,aAAO,KAAK,IAAI;AAAA,QACd,MAAM;AAAA,QACN;AAAA,QACA,YAAY;AAAA,QACZ,aAAa;AAAA,QACb,GAAG;AAAA,MACX,CAAO;AAAA,IACF;AAAA,EACF;AACH,CAAC;","names":[],"sources":["../../../../stores/notifications.js"],"sourcesContent":["import { defineStore } from 'pinia'\r\n\r\nexport const useNotificationsStore = defineStore('notifications', {\r\n  state: () => ({\r\n    notifications: []\r\n  }),\r\n\r\n  actions: {\r\n    add(notification) {\r\n      const id = Date.now() + Math.random()\r\n      const newNotification = {\r\n        id,\r\n        type: 'info', // info, success, warning, error\r\n        title: '',\r\n        message: '',\r\n        duration: 5000, // Auto dismiss after 5 seconds\r\n        persistent: false, // If true, won't auto dismiss\r\n        actions: [], // Array of action buttons\r\n        ...notification\r\n      }\r\n\r\n      this.notifications.push(newNotification)\r\n\r\n      // Auto dismiss if not persistent\r\n      if (!newNotification.persistent && newNotification.duration > 0) {\r\n        setTimeout(() => {\r\n          this.remove(id)\r\n        }, newNotification.duration)\r\n      }\r\n\r\n      return id\r\n    },\r\n\r\n    remove(id) {\r\n      const index = this.notifications.findIndex(n => n.id === id)\r\n      if (index > -1) {\r\n        this.notifications.splice(index, 1)\r\n      }\r\n    },\r\n\r\n    clear() {\r\n      this.notifications = []\r\n    },\r\n\r\n    // Convenience methods\r\n    success(message, options = {}) {\r\n      return this.add({\r\n        type: 'success',\r\n        message,\r\n        ...options\r\n      })\r\n    },\r\n\r\n    error(message, options = {}) {\r\n      return this.add({\r\n        type: 'error',\r\n        message,\r\n        duration: 8000, // Errors stay longer\r\n        ...options\r\n      })\r\n    },\r\n\r\n    warning(message, options = {}) {\r\n      return this.add({\r\n        type: 'warning',\r\n        message,\r\n        duration: 6000,\r\n        ...options\r\n      })\r\n    },\r\n\r\n    info(message, options = {}) {\r\n      return this.add({\r\n        type: 'info',\r\n        message,\r\n        ...options\r\n      })\r\n    },\r\n\r\n    // Toast for async operations\r\n    loading(message, options = {}) {\r\n      return this.add({\r\n        type: 'info',\r\n        message,\r\n        persistent: true,\r\n        showSpinner: true,\r\n        ...options\r\n      })\r\n    }\r\n  }\r\n})\r\n"],"version":3}