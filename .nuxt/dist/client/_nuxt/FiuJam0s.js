import{L as n}from"./4Al0cLfe.js";const u=n("products",{state:()=>({products:[],categories:[],currentProduct:null,searchResults:[],loading:!1,filters:{category:null,priceRange:{min:0,max:1e3},brand:null,inStock:!0},pagination:{currentPage:1,totalPages:1,totalItems:0,itemsPerPage:12}}),getters:{getProductById:r=>t=>r.products.find(e=>e.id===t),getProductsByCategory:r=>t=>r.products.filter(e=>e.categoryId===t),getFeaturedProducts:r=>r.products.filter(t=>t.featured),getDiscountedProducts:r=>r.products.filter(t=>t.discount>0),getInStockProducts:r=>r.products.filter(t=>t.stock>0),getCategoryById:r=>t=>r.categories.find(e=>e.id===t),getFilteredProducts:r=>{let t=[...r.products];return r.filters.category&&(t=t.filter(e=>e.categoryId===r.filters.category)),r.filters.brand&&(t=t.filter(e=>e.brand===r.filters.brand)),r.filters.inStock&&(t=t.filter(e=>e.stock>0)),t=t.filter(e=>e.price>=r.filters.priceRange.min&&e.price<=r.filters.priceRange.max),t}},actions:{async fetchProducts(r={}){var t,e,i,a;this.loading=!0;try{const s=new URLSearchParams;s.append("page",r.page||this.pagination.currentPage),s.append("limit",r.limit||this.pagination.itemsPerPage),(r.category||this.filters.category)&&s.append("category",r.category||this.filters.category),r.search&&s.append("search",r.search),(r.minPrice!==void 0||this.filters.priceRange.min>0)&&s.append("minPrice",r.minPrice||this.filters.priceRange.min),(r.maxPrice!==void 0||this.filters.priceRange.max<1e3)&&s.append("maxPrice",r.maxPrice||this.filters.priceRange.max),r.inStock!==void 0?s.append("inStock",r.inStock):this.filters.inStock&&s.append("inStock","true"),r.sortBy&&s.append("sortBy",r.sortBy),r.sortOrder&&s.append("sortOrder",r.sortOrder);const o=await $fetch(`/api/products?${s.toString()}`);this.products=o.products||o.data||[],this.pagination={currentPage:((t=o.pagination)==null?void 0:t.page)||1,totalPages:((e=o.pagination)==null?void 0:e.totalPages)||1,totalItems:((i=o.pagination)==null?void 0:i.total)||this.products.length,itemsPerPage:((a=o.pagination)==null?void 0:a.limit)||this.pagination.itemsPerPage}}catch(s){console.error("Error fetching products:",s),this.products=[]}finally{this.loading=!1}},async fetchProductById(r){this.loading=!0;try{const t=await $fetch(`/api/products/${r}`);return this.currentProduct=t.product||t,this.currentProduct}catch(t){throw console.error("Error fetching product:",t),this.currentProduct=null,t}finally{this.loading=!1}},async fetchCategories(){try{const r=await $fetch("/api/categories");this.categories=r.categories||r.data||[]}catch(r){console.error("Error fetching categories:",r),this.categories=[]}},async searchProducts(r,t={}){var e,i,a,s;this.loading=!0;try{const o=new URLSearchParams;o.append("q",r),o.append("page",t.page||this.pagination.currentPage),o.append("limit",t.limit||this.pagination.itemsPerPage),t.category&&o.append("category",t.category),t.minPrice!==void 0&&o.append("minPrice",t.minPrice),t.maxPrice!==void 0&&o.append("maxPrice",t.maxPrice),t.sortBy&&o.append("sortBy",t.sortBy),t.sortOrder&&o.append("sortOrder",t.sortOrder);const c=await $fetch(`/api/products/search?${o.toString()}`);return this.searchResults=c.results||c.data||[],this.pagination={currentPage:((e=c.pagination)==null?void 0:e.page)||1,totalPages:((i=c.pagination)==null?void 0:i.totalPages)||1,totalItems:((a=c.pagination)==null?void 0:a.totalItems)||this.searchResults.length,itemsPerPage:((s=c.pagination)==null?void 0:s.limit)||this.pagination.itemsPerPage},this.searchResults}catch(o){throw console.error("Error searching products:",o),this.searchResults=[],o}finally{this.loading=!1}},async fetchProductsByCategory(r){this.loading=!0;try{const t=await $fetch(`/api/categories/${r}/products`,{params:{page:this.pagination.currentPage,limit:this.pagination.itemsPerPage}});this.products=t.products||t.data||[],this.pagination={...this.pagination,totalPages:t.totalPages||1,totalItems:t.totalItems||this.products.length}}catch(t){console.error("Error fetching products by category:",t),this.products=[]}finally{this.loading=!1}},setFilters(r){this.filters={...this.filters,...r},this.pagination.currentPage=1},clearFilters(){this.filters={category:null,priceRange:{min:0,max:1e3},brand:null,inStock:!0},this.pagination.currentPage=1},setCurrentPage(r){this.pagination.currentPage=r},addToRecentlyViewed(r){{let t=JSON.parse(localStorage.getItem("recentlyViewed")||"[]");t=t.filter(e=>e.id!==r.id),t.unshift(r),t=t.slice(0,10),localStorage.setItem("recentlyViewed",JSON.stringify(t))}},getRecentlyViewed(){return JSON.parse(localStorage.getItem("recentlyViewed")||"[]")},async getInventoryStatus(r){try{return await $fetch(`/api/products/${r}/inventory`)}catch(t){throw console.error("Error fetching inventory status:",t),t}},async updateInventory(r,t,e="set"){try{const i=await $fetch(`/api/products/${r}/inventory`,{method:"PUT",body:{stock:t,operation:e}}),a=this.products.find(s=>s.id===r);return a&&(a.stock=i.newStock),this.currentProduct&&this.currentProduct.id===r&&(this.currentProduct.stock=i.newStock),i}catch(i){throw console.error("Error updating inventory:",i),i}},async addStock(r,t){return await this.updateInventory(r,t,"add")},async removeStock(r,t){return await this.updateInventory(r,t,"subtract")},async setStock(r,t){return await this.updateInventory(r,t,"set")},async addProduct(r){try{const t=await $fetch("/api/products",{method:"POST",body:r});return this.products.unshift(t.product),t}catch(t){throw console.error("Error adding product:",t),t}},async updateProduct(r,t){try{const e=await $fetch(`/api/products/${r}`,{method:"PUT",body:t}),i=this.products.findIndex(a=>a.id===r);return i!==-1&&(this.products[i]=e.product),this.currentProduct&&this.currentProduct.id===r&&(this.currentProduct=e.product),e}catch(e){throw console.error("Error updating product:",e),e}},async deleteProduct(r){try{return await $fetch(`/api/products/${r}`,{method:"DELETE"}),this.products=this.products.filter(t=>t.id!==r),this.currentProduct&&this.currentProduct.id===r&&(this.currentProduct=null),{success:!0}}catch(t){throw console.error("Error deleting product:",t),t}},async addCategory(r){try{const t=await $fetch("/api/categories",{method:"POST",body:r});return this.categories.push(t.category),t}catch(t){throw console.error("Error adding category:",t),t}},async updateCategory(r,t){try{const e=await $fetch(`/api/categories/${r}`,{method:"PUT",body:t}),i=this.categories.findIndex(a=>a.id===r);return i!==-1&&(this.categories[i]=e.category),e}catch(e){throw console.error("Error updating category:",e),e}},async deleteCategory(r){try{return await $fetch(`/api/categories/${r}`,{method:"DELETE"}),this.categories=this.categories.filter(t=>t.id!==r),{success:!0}}catch(t){throw console.error("Error deleting category:",t),t}},async fetchProductsWithAdvancedFilters(r){this.loading=!0;try{const t=await $fetch("/api/products/advanced-search",{params:{...r,page:this.pagination.currentPage,limit:this.pagination.itemsPerPage}});return this.products=t.products||[],this.pagination={...this.pagination,totalPages:t.totalPages||1,totalItems:t.totalItems||this.products.length},t}catch(t){throw console.error("Error fetching products with advanced filters:",t),this.products=[],t}finally{this.loading=!1}},async bulkUpdateStock(r){try{const t=await $fetch("/api/products/bulk-inventory",{method:"PUT",body:{updates:r}});return r.forEach(e=>{const i=this.products.find(a=>a.id===e.productId);i&&t.results[e.productId]&&(i.stock=t.results[e.productId].newStock)}),t}catch(t){throw console.error("Error bulk updating stock:",t),t}},getLowStockProducts(r=10){return this.products.filter(t=>t.stock>0&&t.stock<=r)},getOutOfStockProducts(){return this.products.filter(r=>r.stock===0)}}});export{u};
