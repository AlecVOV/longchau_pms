import{L as u,q as c,M as g}from"./4Al0cLfe.js";const f=u("orders",{state:()=>({orders:[],currentOrder:null,orderHistory:[],loading:!1,trackingInfo:null,orderStatuses:["pending","confirmed","processing","packed","shipped","delivered","cancelled"]}),getters:{getOrderById:r=>t=>r.orders.find(e=>e.id===t),getPendingOrders:r=>r.orders.filter(t=>t.status==="pending"),getCompletedOrders:r=>r.orders.filter(t=>t.status==="delivered"),getOrdersByStatus:r=>t=>r.orders.filter(e=>e.status===t),getTotalOrderValue:r=>r.orders.reduce((t,e)=>t+e.total,0),getRecentOrders:r=>r.orders.sort((t,e)=>new Date(e.createdAt)-new Date(t.createdAt)).slice(0,5)},actions:{async createOrder(r){var t;this.loading=!0;try{const e=c(),n=((t=e.user)==null?void 0:t.id)||"demo-user";console.log("Creating order with data:",r);const o={orderNumber:r.orderNumber,items:r.items.map(a=>({id:a.id,quantity:a.quantity,price:a.price})),shipping:r.shipping,billing:r.billing,paymentMethod:r.paymentMethod,subtotal:r.subtotal,tax:r.tax,shippingFee:r.shippingFee,total:r.total};console.log("Sending to API:",o);let s=null;try{const a=await $fetch("/api/orders",{method:"POST",body:o,headers:e.token?{Authorization:`Bearer ${e.token}`}:{}});console.log("API Response:",a),a.success&&a.order&&(s=a.order,console.log("Order created via API successfully:",s.id))}catch(a){throw console.error("API order creation failed:",a),new Error(`Order creation failed: ${a.message||"Unknown API error"}`)}if(s){const a={id:s.id,orderNumber:s.orderNumber,userId:n,items:r.items,shipping:r.shipping,billing:r.billing,paymentMethod:r.paymentMethod,subtotal:r.subtotal,tax:r.tax,shippingFee:r.shippingFee,total:r.total,status:s.status||"pending",createdAt:s.createdAt||new Date().toISOString(),updatedAt:s.updatedAt||new Date().toISOString()},i=`pharmacy-orders-${n}`,d=JSON.parse(localStorage.getItem(i)||"[]");d.push(a),localStorage.setItem(i,JSON.stringify(d)),this.orders.push(a),this.currentOrder=a}return s}catch(e){throw console.error("Error creating order:",e),e}finally{this.loading=!1}},async fetchOrders(r={}){var t;this.loading=!0;try{let e,n="demo-user";try{e=c(),n=((t=e.user)==null?void 0:t.id)||"demo-user"}catch(a){console.warn("Auth store not available, using demo user:",a)}let o=[];const s=[...this.orders];try{const a=Date.now(),i=await $fetch(`/api/orders?_t=${a}`,{headers:e&&e.token?{Authorization:`Bearer ${e.token}`,"Cache-Control":"no-cache",Pragma:"no-cache"}:{}});i&&i.success&&Array.isArray(i.data)?o=i.data:Array.isArray(i)?o=i:(console.warn("Unexpected API response format:",i),o=[])}catch(a){console.warn("API orders fetch failed, loading from localStorage:",a),o=[]}{const a=`pharmacy-orders-${n}`,i=JSON.parse(localStorage.getItem(a)||"[]");if(console.log("Loading orders for user:",n),console.log("Orders key:",a),console.log("Existing orders found:",i.length),console.log("API orders found:",Array.isArray(o)?o.length:"Not an array"),Array.isArray(o)||(console.warn("apiOrders is not an array, converting to empty array:",o),o=[]),o.length===0)this.orders=i.filter(d=>d.userId===n);else{const d=i.map(h=>h.id),l=o.filter(h=>!d.includes(h.id));this.orders=[...i,...l].filter(h=>h.userId===n)}console.log("Final orders loaded:",this.orders.length),s.length>0&&this.checkForStatusChanges(s,this.orders)}}catch(e){console.error("Error fetching orders:",e),this.orders=[]}finally{this.loading=!1}},async fetchOrderById(r){this.loading=!0;try{const t=c(),e=Date.now(),n=await $fetch(`/api/orders/${r}?_t=${e}`,{headers:{Authorization:`Bearer ${t.token}`,"Cache-Control":"no-cache",Pragma:"no-cache"}});this.currentOrder=n.order||n;const o=this.orders.findIndex(s=>s.id===r);return o!==-1&&(this.orders[o]=this.currentOrder),this.currentOrder}catch(t){throw console.error("Error fetching order:",t),this.currentOrder=null,t}finally{this.loading=!1}},async refreshOrderById(r){try{const t=c(),e=Date.now(),n=await $fetch(`/api/orders/${r}?_t=${e}`,{headers:{Authorization:`Bearer ${t.token}`,"Cache-Control":"no-cache",Pragma:"no-cache"}}),o=n.order||n,s=this.orders.findIndex(a=>a.id===r);return s!==-1&&(this.orders[s]=o,console.log(`Order ${r} status updated to:`,o.status)),o}catch(t){throw console.error("Error refreshing order:",t),t}},checkForStatusChanges(r,t){try{const{useNotificationsStore:e}=require("~/stores/notifications"),n=e();r.forEach(o=>{const s=t.find(a=>a.id===o.id);if(s&&s.status!==o.status){console.log(`Order ${o.id} status changed from ${o.status} to ${s.status}`);const i={pending:"Your order is pending confirmation",processing:"Your order is being processed",shipped:"Your order has been shipped",delivered:"Your order has been delivered",cancelled:"Your order has been cancelled"}[s.status.toLowerCase()]||`Order status updated to ${s.status}`;n.success(`Order #${s.orderNumber}: ${i}`)}})}catch(e){console.error("Error checking status changes:",e)}},async updateOrderStatus(r,t){try{const e=c(),n=await $fetch(`/api/orders/${r}/status`,{method:"PATCH",body:{status:t},headers:{Authorization:`Bearer ${e.token}`}}),o=this.orders.findIndex(s=>s.id===r);return o!==-1&&(this.orders[o]=n.order||n),this.currentOrder&&this.currentOrder.id===r&&(this.currentOrder=n.order||n),n}catch(e){throw console.error("Error updating order status:",e),e}},async cancelOrder(r,t=""){try{const e=c(),n=await $fetch(`/api/orders/${r}/cancel`,{method:"POST",body:{reason:t},headers:{Authorization:`Bearer ${e.token}`}}),o=this.orders.findIndex(s=>s.id===r);return o!==-1&&(this.orders[o].status="cancelled",this.orders[o].cancelReason=t),n}catch(e){throw console.error("Error cancelling order:",e),e}},async fetchOrderHistory(r){this.loading=!0;try{const t=c(),e=await $fetch(`/api/users/${r}/orders`,{headers:{Authorization:`Bearer ${t.token}`}});this.orderHistory=e.orders||e.data||[]}catch(t){console.error("Error fetching order history:",t),this.orderHistory=[]}finally{this.loading=!1}},async trackOrder(r){this.loading=!0;try{const t=c(),e=await $fetch(`/api/orders/${r}/tracking`,{headers:{Authorization:`Bearer ${t.token}`}});return this.trackingInfo=e.tracking||e,this.trackingInfo}catch(t){throw console.error("Error tracking order:",t),this.trackingInfo=null,t}finally{this.loading=!1}},async processPayment(r,t){this.loading=!0;try{const e=c(),n=await $fetch(`/api/orders/${r}/payment`,{method:"POST",body:t,headers:{Authorization:`Bearer ${e.token}`}}),o=this.orders.findIndex(s=>s.id===r);return o!==-1&&(this.orders[o].paymentStatus="paid",this.orders[o].status="confirmed"),n}catch(e){throw console.error("Error processing payment:",e),e}finally{this.loading=!1}},async reorderItems(r){try{const t=c(),e=await $fetch(`/api/orders/${r}/reorder`,{method:"POST",headers:{Authorization:`Bearer ${t.token}`}});try{const{useCartStore:n}=await g(async()=>{const{useCartStore:s}=await import("./4Al0cLfe.js").then(a=>a.a3);return{useCartStore:s}},[],import.meta.url),o=n();e.items.forEach(s=>{o.addItem(s.product,s.quantity)})}catch(n){console.warn("Failed to add items to cart:",n)}return e}catch(t){throw console.error("Error reordering items:",t),t}},async downloadInvoice(r){try{const t=c(),e=await $fetch(`/api/orders/${r}/invoice`,{headers:{Authorization:`Bearer ${t.token}`}});if(e.downloadUrl){const n=document.createElement("a");n.href=e.downloadUrl,n.download=`invoice-${r}.pdf`,n.click()}return e}catch(t){throw console.error("Error downloading invoice:",t),t}},clearCurrentOrder(){this.currentOrder=null},clearTrackingInfo(){this.trackingInfo=null}}});export{f as u};
