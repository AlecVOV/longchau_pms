import{q as k,r as o,x as C,a as n,b as t,d as v,t as a,f as $,v as R,F as S,g as D,o as l,h as T}from"./4Al0cLfe.js";const L={class:"max-w-4xl mx-auto p-6"},N={class:"space-y-6"},E={class:"bg-gray-100 p-4 rounded-lg"},A={key:0,class:"bg-white p-3 rounded text-sm overflow-auto"},B={class:"bg-blue-50 p-4 rounded-lg"},I=["disabled"],O={key:0,class:"bg-white p-3 rounded text-sm overflow-auto"},J={class:"bg-green-50 p-4 rounded-lg"},M={key:0,class:"bg-white p-3 rounded text-sm overflow-auto"},V={class:"bg-red-50 p-4 rounded-lg"},z={class:"flex gap-2 mb-3"},P={key:0,class:"bg-white p-3 rounded text-sm overflow-auto"},q={class:"bg-yellow-50 p-4 rounded-lg"},F={class:"bg-white p-3 rounded text-sm max-h-40 overflow-auto"},U={class:"text-gray-500 text-xs"},H={__name:"debug-reminders",setup(j){const d=k(),u=o(!1),c=o(null),m=o(null),g=o(null),b=o(null),p=o(1),h=o([]),r=e=>{h.value.unshift({id:Date.now(),time:new Date().toLocaleTimeString(),message:e}),console.log(e)},y=()=>{h.value=[]},f=async()=>{try{r("Checking current state...");const e=await $fetch("/api/debug/reminders");c.value=e,r(`Current state: ${e.debug.totalReminders} reminders`)}catch(e){r(`Error checking state: ${e.message}`),c.value={error:e.message}}},x=async()=>{u.value=!0;try{r("Creating test reminder...");const e={medicationName:"Test Medicine "+Date.now(),dosage:"100mg",frequency:"daily",timeSlots:["08:00","20:00"],notes:"Test reminder for debugging"};r(`Test data: ${JSON.stringify(e)}`);const s=await $fetch("/api/medication-reminders",{method:"POST",body:e,headers:{Authorization:`Bearer ${d.token}`}});m.value=s,r(`✅ Reminder created successfully! ID: ${s.reminder.id}`),await f()}catch(e){r(`❌ Error creating reminder: ${e.message}`),m.value={error:e.message}}finally{u.value=!1}},_=async()=>{try{r("Loading reminders from API...");const e=await $fetch("/api/medication-reminders",{headers:{Authorization:`Bearer ${d.token}`}});g.value=e,r(`✅ Loaded ${e.reminders.length} reminders`)}catch(e){r(`❌ Error loading reminders: ${e.message}`),g.value={error:e.message}}},w=async()=>{try{r(`Attempting to delete reminder ID: ${p.value}`);const e=await $fetch(`/api/medication-reminders/${p.value}`,{method:"DELETE",headers:{Authorization:`Bearer ${d.token}`}});b.value=e,r("✅ Reminder deleted successfully!"),await f()}catch(e){r(`❌ Error deleting reminder: ${e.message}`),b.value={error:e.message}}};return C(()=>{r("Debug page loaded"),d.token||r("❌ No auth token found - please login first")}),(e,s)=>(l(),n("div",L,[s[6]||(s[6]=t("h1",{class:"text-2xl font-bold mb-6"},"Medication Reminder Debug Test",-1)),t("div",N,[t("div",E,[s[1]||(s[1]=t("h2",{class:"text-lg font-semibold mb-3"},"Current State",-1)),t("button",{onClick:f,class:"btn-primary mb-3"}," Check Current State "),c.value?(l(),n("pre",A,a(JSON.stringify(c.value,null,2)),1)):v("",!0)]),t("div",B,[s[2]||(s[2]=t("h2",{class:"text-lg font-semibold mb-3"},"Create Test Reminder",-1)),t("button",{onClick:x,class:"btn-primary mb-3",disabled:u.value},a(u.value?"Creating...":"Create Test Reminder"),9,I),m.value?(l(),n("pre",O,a(JSON.stringify(m.value,null,2)),1)):v("",!0)]),t("div",J,[s[3]||(s[3]=t("h2",{class:"text-lg font-semibold mb-3"},"Load Reminders",-1)),t("button",{onClick:_,class:"btn-primary mb-3"}," Load Reminders from API "),g.value?(l(),n("pre",M,a(JSON.stringify(g.value,null,2)),1)):v("",!0)]),t("div",V,[s[4]||(s[4]=t("h2",{class:"text-lg font-semibold mb-3"},"Delete Test",-1)),t("div",z,[$(t("input",{"onUpdate:modelValue":s[0]||(s[0]=i=>p.value=i),type:"number",placeholder:"Reminder ID to delete",class:"form-input flex-1"},null,512),[[R,p.value]]),t("button",{onClick:w,class:"btn-primary"}," Delete ")]),b.value?(l(),n("pre",P,a(JSON.stringify(b.value,null,2)),1)):v("",!0)]),t("div",q,[s[5]||(s[5]=t("h2",{class:"text-lg font-semibold mb-3"},"Console Log",-1)),t("div",F,[(l(!0),n(S,null,D(h.value,i=>(l(),n("div",{key:i.id,class:"border-b py-1"},[t("span",U,a(i.time),1),T(" - "+a(i.message),1)]))),128))]),t("button",{onClick:y,class:"btn-outline mt-2"},"Clear Logs")])])]))}};export{H as default};
